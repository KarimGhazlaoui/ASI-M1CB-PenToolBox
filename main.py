# coding:utf-8
import sys
import subprocess
import paramiko
import datetime
import os 

from PyQt5.QtCore import Qt, QThread, pyqtSignal, QSize, QTimer
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QApplication, QMessageBox, QFileDialog

from qfluentwidgets import SplitFluentWindow, Flyout, InfoBarIcon, FlyoutAnimationType, NavigationItemPosition, SplashScreen, Dialog

from app.interface.scan_interface import ScanInterface
from app.interface.engagement_interface import EngagementInterface
from app.interface.cible_interface import CibleInterface
from app.interface.vulnerabilite_interface import VulnerabiliteInterface
from app.interface.evaluation_interface import EvaluationInterface
from app.interface.qemu_interface import QemuInterface

from app.scripts.qemu_script import QemuManager
from app.scripts.profile_script import Profile
from app.scripts.gvm_script import gvm
from app.scripts.rapport_script import RapportGenerateur
from app.automatisation import scan_vers_cible

import app.resource.resource_rc

# Variable permettant de v√©rifier la pr√©sence de l'image de Kali
global_kali = None
global_lecture_seul = None

# Classe Worker pour effectuer des t√¢ches longues en arri√®re-plan
class Worker(QThread):
    finished = pyqtSignal()  # Signal √©mis lorsque la t√¢che est termin√©e
    result = pyqtSignal(object)  # Signal √©mis avec le r√©sultat de la t√¢che

    def __init__(self, function, *args, **kwargs):
        super().__init__()
        self.function = function
        self.args = args
        self.kwargs = kwargs
        self.stopped = False

    def stop(self):
        self.stopped = True

    def run(self):
        if not self.stopped:
            result = self.function(*self.args, **self.kwargs)
            self.result.emit(result)  # √âmettre le r√©sultat
        self.finished.emit()  # √âmettre le signal de fin

# Classe SSHWorker pour ex√©cuter des commandes SSH en arri√®re-plan
class SSHWorker(QThread):
    update_signal = pyqtSignal(str)  # Signal pour envoyer des mises √† jour √† l'interface graphique
    finished_signal = pyqtSignal()  # Signal √©mis lorsque la t√¢che SSH est termin√©e

    def __init__(self, host='127.0.0.1', port=60022, username='kali', password='root', command=None):
        super().__init__()
        self.host = host
        self.port = port
        self.username = username
        self.password = password
        self.command = command + ' && echo "command completed"'
        self.output = ""  # Attribut pour stocker la sortie de la commande

    def run(self):
        print("d√©marrage run worker")
        try:
            client = paramiko.SSHClient()
            client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            client.connect(self.host, self.port, username=self.username, password=self.password)
            stdin, stdout, stderr = client.exec_command(self.command)
            for line in stdout:
                output_line = line.strip()
                self.update_signal.emit(output_line)
                self.output += output_line + "\n"  # Ajouter la sortie √† l'attribut
            for line in stderr:
                output_line = line.strip()
                self.update_signal.emit(output_line)
                self.output += output_line + "\n"  # Ajouter la sortie √† l'attribut
            while not stdout.channel.exit_status_ready():
                pass
            self.finished_signal.emit()  # √âmettre le signal de fin
            client.close()
        except Exception as e:
            error_message = f"Erreur : {str(e)}"
            self.update_signal.emit(error_message)
            self.output += error_message + "\n"  # Ajouter le message d'erreur √† l'attribut

class QemuWorker(QThread):
    def __init__(self):
        super().__init__()

    def run(self):
        global global_kali
        if global_kali is not None:
            qemu_command = [
                r'app\qemu\qemu-system-x86_64.exe',
                '-m', '8G',
                '-smp', '4',
                '-hda', r'app\qemu\kali\kali.qcow2',
                '-usbdevice', 'tablet',
                '-name', 'kali',
                '-nic', 'user,restrict=off,model=virtio,id=vmnic,hostfwd=tcp::60022-:22,hostfwd=tcp::9392-:9392',
                '-monitor', 'stdio',
                '-vga', 'vmware',
                '-loadvm', 'gvm',
                '-vnc', ':0'
            ]

            # Redirect QEMU output to null device to hide the terminal window
            with open(os.devnull, 'w') as fnull:
                self.qemu_process = subprocess.Popen(
                    qemu_command,
                    stdin=subprocess.PIPE,
                    stdout=fnull,
                    stderr=fnull,
                    text=True
                )
        else:
            print("kali.qcow2 n'existe pas")

    def terminate_qemu(self):
        if self.qemu_process:
            self.qemu_process.terminate()
            self.qemu_process.wait()

# Classe principale
class main(SplitFluentWindow):

    automatisation = scan_vers_cible()
    global_taskid = ""
    global_rapportid = ""

    def __init__(self, parent=None):
        super().__init__(parent=parent)
        self.gvm_management = gvm(self)


        kali_os = "app/qemu/kali/kali.qcow2"

        global global_kali
        if os.path.exists(kali_os):
            global_kali = 1

        self.worker = None
        
        #CustomMessageBox(self)

        # Localisation des profiles d'entreprises
        self.profile_manager = Profile('app/profiles')

        self.initWindow()

        # Cr√©ation des sous-interface
        self.scanInterface = ScanInterface(self)
        #self.engagementInterface = EngagementInterface(self)
        self.cibleInterface = CibleInterface(self)
        self.vulnerabiliteInterface = VulnerabiliteInterface(self)
        self.evaluationInterface = EvaluationInterface(self)
        self.qemuInterface = QemuInterface(self)

        pos = NavigationItemPosition.SCROLL

        self.initNavigation()
        self.splashScreen.finish()

    # Creation des interfaces
    def initNavigation(self):

        # Ajout des sous-interfaces √† la fen√™tre principale
        self.addSubInterface(self.scanInterface, QIcon(":/images/scaninterfaceicon.png"), 'Scan - Cible et Reconnaissance')
        self.addSubInterface(self.cibleInterface, QIcon(":/images/cible.png"), 'Scan - Cibles D√©tect√©es')
        self.addSubInterface(self.vulnerabiliteInterface, QIcon(":/images/vulnerabilite.png"), 'Exploitation - Vuln√©rabilit√©s')
        self.addSubInterface(self.evaluationInterface, QIcon(":/images/strike.png"), 'Exploitation - Evaluation des Vuln√©rabilit√©s')
        global global_kali
        if global_kali == 1:
            self.navigationInterface.addSeparator()
            self.addSubInterface(self.qemuInterface, QIcon(":/images/kali.png"), 'Kali - Control Center')

        # Ajout d'un √©l√©ment de navigation pour g√©n√©rer un rapport
        self.navigationInterface.addItem(
            routeKey='rapport',
            icon=QIcon(":/images/agreement.png"),
            text="G√©n√©rer un Rapport",
            onClick=self.ReportCreator,
            selectable=False,
            tooltip="G√©n√®re un rapport",
            position=NavigationItemPosition.BOTTOM
        )

        # Connexion des signaux aux slots
        self.scanInterface.boutonprofilecreation.clicked.connect(self.profiles_creation)
        self.scanInterface.chargementprofile.clicked.connect(self.chargement_profile)
        self.scanInterface.lancementscan.clicked.connect(self.lancer_scan)
        self.cibleInterface.scanvulnerabilite.clicked.connect(self.vulnerabilite_scan)
        self.vulnerabiliteInterface.scanvulnerabilite.clicked.connect(self.evaluation_transition)

        self.evaluationInterface.passwordchecker.textChanged.connect(self.check_strength)
        self.evaluationInterface.hydraexecution.clicked.connect(self.hydra_lancement)

        self.profiles_initialisation()

    # Splash Screen d√©marrage
    def initWindow(self):
        self.qemu_manager = QemuManager()
        # Pr√©paration param√®tre fen√™tre PyQt5
        self.resize(1280, 800)
        self.setWindowTitle("KGB - PenToolBox")
        self.setWindowIcon(QIcon(':/images/logo.png'))

        # create splash screen
        self.splashScreen = SplashScreen(self.windowIcon(), self)
        self.splashScreen.setIconSize(QSize(106, 106))
        self.splashScreen.raise_()

        desktop = QApplication.desktop().availableGeometry()
        w, h = desktop.width(), desktop.height()
        self.move(w//2 - self.width()//2, h//2 - self.height()//2)
        self.show()
        
        # Start QEMU in a separate thread
        global global_kali
        if global_kali == 1:
            self.qemu_worker = QemuWorker()
            self.qemu_worker.start()
            self.qemu_worker.finished.connect(self.qemu_started)
            QApplication.processEvents()
        else:
            self.showDialog(title="‚õî Kali.qcow2 est inexistant ! ‚õî", content="VM Kali manquante, merci de l'ajouter dans app/qemu/kali \n L'application sera en lecture seul jusqu'√† son ajout üò•")

    def showDialog(self, title, content):
        w = Dialog(title, content, self)
        w.setTitleBarVisible(False)
        # w.setContentCopyable(True)
        w.yesButton.setText("Accepter")
        w.cancelButton.setText("Quitter")
        if w.exec():
            print('lecture seul activ√©')
            global global_lecture_seul
            global_lecture_seul = 1
        else:
            if self.worker and self.worker.isRunning():
                self.worker.finished.connect(lambda: self.worker.deleteLater())  # Wait for the worker to finish before deleting
                self.worker.stop()  # Stop the worker
                print("Worker arr√™t√©")
            else:
                QApplication.quit()
    
    def qemu_started(self):
        self.qemu_manager.prep_kali()
        self.qemuInterface.vnc_start()
        QApplication.processEvents()

    def terminate_qemu(self):
        if self.qemu_worker:
            self.qemu_worker.terminate_qemu()
            self.qemu_worker.wait()

    def resizeEvent(self, e):
        super().resizeEvent(e)
        if hasattr(self, 'splashScreen'):
            self.splashScreen.resize(self.size())

    # Fonction pour initialiser les profils
    def profiles_initialisation(self):
        print("Initialisation des profils")
        profiles = self.profile_manager.list_profiles()
        self.scanInterface.loadprofile.clear()
        if profiles:
            self.scanInterface.loadprofile.addItems(profiles)

    # Fonction pour cr√©er un profil
    def profiles_creation(self):
        print("Cr√©ation du profil")
        profile = self.scanInterface.createprofile.text()

        if not profile:
            print("Aucun texte entr√©")
            return
        if profile in self.profile_manager.list_profiles():
            print("Profil d√©j√† existant")
            return
        
        variables = {}
        self.profile_manager.save_profile(variables,profile)
        self.profiles_initialisation()
        print("Profil cr√©√© avec succ√®s")

    # Fonction pour charger un profil
    def chargement_profile(self):
        print("Chargement du profil")
        selected_profile = self.scanInterface.loadprofile.currentText()
        if selected_profile:
            self.scanInterface.actualprofile.setText(selected_profile)

            # Partie cible sous-r√©seau
            reseau_cible = self.profile_manager.load_variable(selected_profile, "reseau_cible")
            if reseau_cible is not None:
                self.scanInterface.sousreseau.setText(str(reseau_cible))
            else:
                self.scanInterface.sousreseau.clear()

            # Partie cibles d√©tect√©es
            cible_detecte = self.profile_manager.load_variable(selected_profile, "cible_detecte")
            if cible_detecte is not None:
                self.cibleInterface.cibletable(scan_results=cible_detecte)
            else:
                self.cibleInterface.cibledetecte.clear()

            # Partie vuln√©rabilit√©s d√©tect√©es
            vulnerabilite_detecte = self.profile_manager.load_variable(selected_profile, "vulnerabilite_detecte")
            if vulnerabilite_detecte is not None:
                self.vulnerabiliteInterface.chargement_vulnerabilite(vulnerabilite_results=vulnerabilite_detecte)
            else:
                self.vulnerabiliteInterface.clear_vulnerabilite()

            # Chargement des cibles Hydra si disponibles
            cible_21 = set()
            vulnerabilite_cible = self.profile_manager.load_variable(selected_profile, "vulnerabilite_detecte")

            if vulnerabilite_cible is not None:
                for item in vulnerabilite_cible:
                    if item['Port'] == '21':
                        cible_21.add(item['IP'])
            else:
                cible_21 = []
            
            hydra_cibles = list(cible_21)
            self.evaluationInterface.hydracomboboxtarget.clear()
            self.evaluationInterface.hydracomboboxtarget.addItems(hydra_cibles)

        else:
            print("Aucun profil s√©lectionn√©")

    # Fonction pour g√©n√©rer un rapport
    def ReportCreator(self):
        selected_profile = self.scanInterface.actualprofile.text()

        if not selected_profile:
            self.infofly(
                icone=InfoBarIcon.ERROR,
                titre="Aucun profil s√©lectionn√©",
                contenu="Merci de charger ou cr√©er un profil",
                cible=self.scanInterface.lancementscan
            )
            print("Aucun profil")
            return

        # Get the current date in European French format
        current_date = datetime.datetime.now().strftime("%d-%m-%Y")
        default_filename = f"rapport_{selected_profile}_{current_date}.pdf"

        options = QFileDialog.Options()
        file_path, _ = QFileDialog.getSaveFileName(self, 'Sauvegarder le rapport', default_filename, 'PDF (*.pdf)', options=options)

        if file_path:
            generer_pdf = RapportGenerateur(selected_profile)
            generer_pdf.GenererRapport(Profile=selected_profile, file_path=file_path)
            self.infofly(
                icone=InfoBarIcon.SUCCESS,
                titre="Rapport g√©n√©r√© avec succ√®s",
                contenu=f"Votre rapport est disponible pour {selected_profile}",
                cible=self.scanInterface.lancementscan
            )
        else:
            self.infofly(
                icone=InfoBarIcon.WARNING,
                titre="Op√©ration annul√©e",
                contenu="Vous avez annul√© la sauvegarde du rapport",
                cible=self.scanInterface.lancementscan
            )
            print("Annulation de la g√©n√©ration du rapport")


    # Fonction pour lancer un scan
    def lancer_scan(self):
        global global_lecture_seul
        if global_lecture_seul is None:
            if self.scanInterface.actualprofile.text():
                selected_profile = self.scanInterface.loadprofile.currentText()
                cible = self.scanInterface.sousreseau.text()

                self.worker = Worker(self.automatisation.lancement_scan, sousreseau=cible, optionscan=1)
                self.worker.result.connect(lambda result, cible=cible: self.scan_finished(selected_profile, cible, result))
                self.worker.finished.connect(self.worker.deleteLater)

                self.worker.start()
            else:
                self.infofly(icone=InfoBarIcon.ERROR,titre="Aucun profil s√©lectionn√©",contenu="Merci de charger ou cr√©er un profil",cible=self.scanInterface.lancementscan)
                print("Aucun profil s√©lectionn√© ou charg√©")
        else:
            self.infofly(icone=InfoBarIcon.ERROR,titre="Lecture Seul",contenu="PenToolBox est en lecture seul",cible=self.scanInterface.lancementscan)

    # Fonction appel√©e lorsque le scan est termin√©
    def scan_finished(self, selected_profile, cibles, result):
        if result:   
            self.profile_manager.add_or_update_variable(selected_profile, "reseau_cible", cibles)
        else:
            ip_address, cidr = self.automatisation.get_network_interface_info()
            result = ip_address + "/" + cidr
            self.profile_manager.add_or_update_variable(selected_profile, "reseau_cible", cibles)
        
        # Mettre √† jour les cibles d√©tect√©es dans le profil
        self.profile_manager.add_or_update_variable(selected_profile, "cible_detecte", result)

        print(result)

        self.scanInterface.sousreseau.setText(str(cibles))

        # Mettre √† jour l'interface avec les r√©sultats du scan
        self.cibleInterface.cibletable(scan_results=result)

        # Passer √† l'interface des cibles apr√®s le traitement des r√©sultats du scan
        SplitFluentWindow.switchTo(self, interface=self.cibleInterface)

    # Fonction pour scanner les vuln√©rabilit√©s
    def vulnerabilite_scan(self):
        global global_lecture_seul
        if global_lecture_seul is None:
            cible_table = self.cibleInterface.TableContents()
            if cible_table:
                print("table vulnerabilite test")
                print(cible_table)
                vulnerabilite = self.gvm_management.scan_vulnerabilite(cible_table)
                print(vulnerabilite)
                #SplitFluentWindow.switchTo(self, interface=self.vulnerabiliteInterface)
            else:
                self.infofly(icone=InfoBarIcon.ERROR, titre="Aucune cible disponible", contenu="Aucune cible n'existe, effectuer un scan au pr√©alable", cible=self.cibleInterface.scanvulnerabilite)
        else:
            self.infofly(icone=InfoBarIcon.ERROR, titre="Lecture Seul", contenu="PenToolBox est en lecture seul", cible=self.cibleInterface.scanvulnerabilite)

    # Fonction appel√©e lorsque le scan des vuln√©rabilit√©s est termin√©
    def vulnerabilite_scan_finished(self, vulnerabilite):
        # Traiter le r√©sultat du scan de vuln√©rabilit√©s
        print("R√©sultat du scan de vuln√©rabilit√©:", vulnerabilite)
        # Mettre √† jour l'interface avec les r√©sultats du scan de vuln√©rabilit√©s
        self.vulnerabiliteInterface.update_vulnerabilities(vulnerabilite)
        # Passer √† l'interface de vuln√©rabilit√©s apr√®s le traitement des r√©sultats du scan
        SplitFluentWindow.switchTo(self, interface=self.vulnerabiliteInterface)

    # Fonction pour afficher le contenu de la table
    def printtable(self):
        cible_table = self.cibleInterface.TableContents()
        print(cible_table)

    # Fonction pour cr√©er la t√¢che GVM
    def gvm_creation(self, commandssh=None, callback=None):
        if commandssh is not None:
            print("gvm_creation, contenu commandssh :", commandssh)
            self.worker = SSHWorker(command=commandssh)
            self.worker.update_signal.connect(self.cibleInterface.vulnerabilitelive.append)
            self.worker.finished_signal.connect(lambda: self.gvm_fin(callback))  # Se connecter au slot pour la fin
            self.worker.start()
        else:
            print("GVM : Commande vide, probl√®me au niveau de la fonction gvm_creation")

    # Fonction appel√©e √† la fin de Hydra
    def gvm_fin(self, callback):
        gvm_resultat = self.worker.output  # Acc√©der √† l'attribut de sortie
        selected_profile = self.scanInterface.loadprofile.currentText()
        self.profile_manager.add_or_update_variable(selected_profile, "gvm_resultat", gvm_resultat)
        print("Sortie de la commande gvm :", gvm_resultat)
        if callback:
            callback(gvm_resultat)

    # Fonction pour mettre √† jour en temps r√©el
    def liveupdate(self, livedata):
        self.cibleInterface.liveupdate(livedata)

    # Fonction pour v√©rifier le status du scan OpenVas
    def vulnerabilite_status(self, rapportid, taskid):
        print("vulnerabilite_status taskid :", taskid)
        print("vulnerabilite_status rapportid :", rapportid)
        self.global_rapportid = rapportid
        self.global_taskid = taskid
        livestatus = [self.global_taskid, 'Cr√©ation', 0]
        self.cibleInterface.gvm_progress_table(liveprogress=livestatus)
        self.status = ""
        self.timer = QTimer()
        self.timer.timeout.connect(self.vulnerabilite_status_debut)

        self.timer.start(10000)

    def vulnerabilite_status_debut(self):
        print("global_taskid :", self.global_taskid)
        if self.global_taskid is not None:
            commandssh = f"""gvm-cli socket --xml '<get_tasks task_id="{self.global_taskid}"/>' --pretty"""
            self.worker = SSHWorker(command=commandssh)
            #self.worker.update_signal.connect(self.cibleInterface.vulnerabilitelive.append)
            self.worker.finished_signal.connect(self.vulnerabilite_status_fin)
            self.worker.start()

    def vulnerabilite_status_fin(self):
        self.gvm_management = gvm(self)
        reponse_status = self.worker.output
        print(reponse_status)
        lines = reponse_status.strip().split('\n')
        if lines[-1].strip() == 'command completed':
            lines.pop()
        reponse_status = '\n'.join(lines)

        self.status = self.gvm_management.status_live_update(response=reponse_status)
        print("retour status :", self.status)

        if self.status[0] == "Done":
            self.timer.stop()
            self.vulnerabilite_traitement_start

        livestatus = [self.global_taskid, self.status[0], self.status[1]]

        self.cibleInterface.gvm_progress_table(liveprogress=livestatus)

    def vulnerabilite_traitement_start(self):
        if self.global_rapportid is not None:
            commandssh = f"""gvm-cli socket --xml "<get_reports report_id='{self.global_rapportid}' apply_overrides='0' levels='hml' min_qod='50' first='1' rows='1000' sort='severity' ignore_pagination='1' details='1' format_id='c1645568-627a-11e3-a660-406186ea4fc5'/>" --pretty"""
            self.worker = SSHWorker(command=commandssh)
            self.worker.finished_signal.connect(self.vulnerabilite_traitement_fin)
            self.worker.start()

    def vulnerabilite_traitement_fin(self):
        self.gvm_management = gvm(self)
        rapport = self.worker.output
        lines = rapport.strip().split('\n')
        if lines[-1].strip() == 'command completed':
            lines.pop()
        rapport = '\n'.join(lines)

        rapport_clean = self.gvm_management.rapport_nettoyage(rapport)

        cve_csv = self.gvm_management.traitement_csv(donnee_csv=rapport_clean)

        # Sauvegarde dans le profile du r√©sultat
        #selected_profile = self.scanInterface.loadprofile.currentText()
        #self.profile_manager.add_or_update_variable(selected_profile, "vulnerabilite_detecte", cve_csv)

        self.vulnerabiliteInterface.chargement_vulnerabilite(vulnerabilite_results=cve_csv)

    # Fonction pour transf√©rer les cibles vers hydra
    def evaluation_transition(self):
        global global_lecture_seul
        if global_lecture_seul is None:
            cible_21 = set()
            vulnerabilite_cible = []
            
            if self.vulnerabiliteInterface.vulnerabilitetable.rowCount() > 0:

                for row in range(self.vulnerabiliteInterface.vulnerabilitetable.rowCount()):
                    row_data = []
                    for column in range(self.vulnerabiliteInterface.vulnerabilitetable.columnCount()):
                        item = self.vulnerabiliteInterface.vulnerabilitetable.item(row, column)
                        if item is not None:
                            row_data.append(item.text())
                        else:
                            row_data.append("")  # Add empty string if cell is empty
                    vulnerabilite_cible.append(row_data)

                for item in vulnerabilite_cible:
                    if item[1] == '21':
                        cible_21.add(item[0])

                hydra_cibles = list(cible_21)
                self.evaluationInterface.hydracomboboxtarget.clear()
                self.evaluationInterface.hydracomboboxtarget.addItems(hydra_cibles)
            else:
                print("liste des vulnerabilites vide")
                self.infofly(icone=InfoBarIcon.ERROR, titre="Aucune vuln√©rabilit√©",contenu="Aucune vuln√©rabilit√© d√©tect√©, faite un scan de vuln√©rabilit√© avant d'effectuer une √©valuation", cible=self.vulnerabiliteInterface.scanvulnerabilite)
        else:
            self.infofly(icone=InfoBarIcon.ERROR, titre="Lecture Seul",contenu="PenToolBox est en lecture seul", cible=self.vulnerabiliteInterface.scanvulnerabilite)

    # Fonction pour v√©rifier la s√©curit√© du mot de passe
    def check_strength(self):
        password = self.evaluationInterface.passwordchecker.text()
        self.evaluationInterface.complexitevisuel.setVisible(True)

        has_upper = any(c.isupper() for c in password)
        has_lower = any(c.islower() for c in password)
        has_digit = any(c.isdigit() for c in password)
        has_special = any(not c.isalnum() for c in password)

        if len(password) < 8 or not (has_upper and has_lower and has_digit and has_special):
            strength = "Faible"
            self.evaluationInterface.complexitevisuel.setStyleSheet("background-color: red")
        elif len(password) < 10:
            strength = "Moyen"
            self.evaluationInterface.complexitevisuel.setStyleSheet("background-color: orange")
        else:
            strength = "Fort"
            self.evaluationInterface.complexitevisuel.setStyleSheet("background-color: green")

        self.evaluationInterface.complexitepassword.setText(f"Complexit√© du mot de passe : {strength}")

    # Fonction pour lancer Hydra
    def hydra_lancement(self):
        global global_lecture_seul
        if global_lecture_seul is None:
            hydra_cible = self.evaluationInterface.hydracomboboxtarget.currentText()
            if hydra_cible.count() == 0:
                self.infofly(icone=InfoBarIcon.ERROR, titre="Aucune cible disponible",contenu="Merci de scanner les vuln√©rabilit√©s avant !", cible=self.evaluationInterface.hydraexecution)
            else:
                self.evaluationInterface.hydra_progressbar.setVisible(True)
                command = f"cd passwords-and-usernames && hydra -L top-usernames-shortlist.txt -P xato-net-10-million-passwords-10.txt {hydra_cible} ftp"
                self.worker = SSHWorker(command=command)
                self.worker.update_signal.connect(self.evaluationInterface.evaluationterminal.append)
                self.worker.finished_signal.connect(self.hydra_fin)  # Se connecter au slot pour la fin
                self.worker.start()
        else:
            self.infofly(icone=InfoBarIcon.ERROR, titre="Lecture Seul",contenu="PenToolBox est en lecture seul", cible=self.evaluationInterface.hydraexecution)

    # Fonction appel√©e √† la fin de Hydra
    def hydra_fin(self):
        hydra_resultat = self.worker.output  # Acc√©der √† l'attribut de sortie
        selected_profile = self.scanInterface.loadprofile.currentText()
        self.profile_manager.add_or_update_variable(selected_profile, "hydra_resultat", hydra_resultat)
        print("Sortie de la commande Hydra :", hydra_resultat)
        self.evaluationInterface.hydra_progressbar.setVisible(False)

    # Fonction pour les fylouts
    def infofly(self, icone, titre, contenu, cible,):
        Flyout.create(
                icon=icone,
                title=titre,
                content=contenu,
                target=cible,
                parent=self,
                isClosable=True,
                aniType=FlyoutAnimationType.PULL_UP
                )

    # Fonction pour g√©rer l'√©v√©nement de fermeture
    def closeEvent(self, event):
        # Handle the close event
        reply = QMessageBox.question(self, 'Message',
                                     "√ätes-vous s√ªr de vouloir fermer la PenToolBox ?", QMessageBox.Yes |
                                     QMessageBox.No, QMessageBox.No)

        if reply == QMessageBox.Yes:
            event.accept()
            print("Fermeture du KGB - PenToolBox")
            self.qemuInterface.vnc_widget.stop()
            super().closeEvent(event)
            self.terminate_qemu()
            if self.worker and self.worker.isRunning():
                self.worker.finished.connect(lambda: self.worker.deleteLater())  # Wait for the worker to finish before deleting
                self.worker.stop()  # Stop the worker
                print("Worker arr√™t√©")
            else:
                QApplication.quit()
        else:
            event.ignore()

# Point d'entr√©e du programme
if __name__ == '__main__':
    QApplication.setHighDpiScaleFactorRoundingPolicy(Qt.HighDpiScaleFactorRoundingPolicy.PassThrough)
    QApplication.setAttribute(Qt.AA_EnableHighDpiScaling)
    QApplication.setAttribute(Qt.AA_UseHighDpiPixmaps)

    app = QApplication(sys.argv)
    w = main()
    w.show()
    sys.exit(app.exec_())
