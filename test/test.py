import xml.etree.ElementTree as ET
import base64
import io
import csv

# Sample XML containing base64 text
xml_string = """
<get_reports_response status="200" status_text="OK">
  <report id="18d1de94-04cf-4a21-a5fa-192455e7509b" format_id="c1645568-627a-11e3-a660-406186ea4fc5" extension="csv" content_type="text/csv"><owner><name>pentoolbox</name></owner><name>2024-05-06T01:27:29+02:00</name><comment/><creation_time>2024-05-06T01:27:29+02:00</creation_time><modification_time>2024-05-06T04:09:57+02:00</modification_time><writable>0</writable><in_use>0</in_use><task id="a6a36912-6cf3-4120-89cd-08abe04cc189"><name>06/05/2024 01:27:19</name></task><report_format id="c1645568-627a-11e3-a660-406186ea4fc5"><name>CSV Results</name></report_format>SVAsSG9zdG5hbWUsUG9ydCxQb3J0IFByb3RvY29sLENWU1MsU2V2ZXJpdHksUW9ELFNvbHV0aW9uIFR5cGUsTlZUIE5hbWUsU3VtbWFyeSxTcGVjaWZpYyBSZXN1bHQsTlZUIE9JRCxDVkVzLFRhc2sgSUQsVGFzayBOYW1lLFRpbWVzdGFtcCxSZXN1bHQgSUQsSW1wYWN0LFNvbHV0aW9uLEFmZmVjdGVkIFNvZnR3YXJlL09TLFZ1bG5lcmFiaWxpdHkgSW5zaWdodCxWdWxuZXJhYmlsaXR5IERldGVjdGlvbiBNZXRob2QsUHJvZHVjdCBEZXRlY3Rpb24gUmVzdWx0LEJJRHMsQ0VSVHMsT3RoZXIgUmVmZXJlbmNlcwoxOTIuMTY4LjEuMjksTUVUQVNQTE9JVEFCTEUsODAsdGNwLDAuMCxMb2csODAsIiIsImZhdmljb24uaWNvIEJhc2VkIEZpbmdlcnByaW50aW5nIChIVFRQKSIsIkhUVFAgYmFzZWQgZmluZ2VycHJpbnRpbmcgb2Ygd2ViIGFwcGxpY2F0aW9ucyBiYXNlZCBvbiBhbgogIGV4cG9zZWQgJ2Zhdmljb24uaWNvJyBmaWxlLiIsIlRoZSBmb2xsb3dpbmcgYXBwcy9zZXJ2aWNlcyB3ZXJlIGlkZW50aWZpZWQ6CgoiInBocG15YWRtaW4gKDIuMTEuOC4xIC0gNC4yLngpIiIgZmluZ2VycHJpbnRlZCBieSB0aGUgZmlsZTogIiJodHRwOi8vMTkyLjE2OC4xLjI5L3BocE15QWRtaW4vZmF2aWNvbi5pY28iIgoKIiwxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMjAxMDgsIiIsYTZhMzY5MTItNmNmMy00MTIwLTg5Y2QtMDhhYmUwNGNjMTg5LCIwNi8wNS8yMDI0IDAxOjI3OjE5IiwyMDI0LTA1LTA2VDAxOjQxOjQ1KzAyOjAwLDQwZTU0ZTdjLTQ2NWUtNGIyNy05YjdlLTQ3OTMxNThkNWI1YiwiIiwiIiwiIiwiIiwiCkRldGFpbHM6CidmYXZpY29uLmljbycgQmFzZWQgRmluZ2VycHJpbnRpbmcgKEhUVFApCihPSUQ6IDEuMy42LjEuNC4xLjI1NjIzLjEuMC4yMDEwOCkKVmVyc2lvbiB1c2VkOiAyMDIzLTA4LTAxVDE1OjI5OjEwKzAyOjAwCiIsIiIsIiIsIiIsIiIKMTkyLjE2OC4xLjI5LE1FVEFTUExPSVRBQkxFLDgwLHRjcCw1LjAsTWVkaXVtLDgwLCJNaXRpZ2F0aW9uIiwiL2RvYyBkaXJlY3RvcnkgYnJvd3NhYmxlIiwiVGhlIC9kb2MgZGlyZWN0b3J5IGlzIGJyb3dzYWJsZS4KICAvZG9jIHNob3dzIHRoZSBjb250ZW50IG9mIHRoZSAvdXNyL2RvYyBkaXJlY3RvcnkgYW5kIHRoZXJlZm9yZSBpdCBzaG93cyB3aGljaCBwcm9ncmFtcyBhbmQgLSBpbXBvcnRhbnQhIC0gdGhlIHZlcnNpb24gb2YgdGhlIGluc3RhbGxlZCBwcm9ncmFtcy4iLCJWdWxuZXJhYmxlIFVSTDogaHR0cDovLzE5Mi4xNjguMS4yOS9kb2MvCiIsMS4zLjYuMS40LjEuMjU2MjMuMS4wLjEwMDU2LCJDVkUtMTk5OS0wNjc4IixhNmEzNjkxMi02Y2YzLTQxMjAtODljZC0wOGFiZTA0Y2MxODksIjA2LzA1LzIwMjQgMDE6Mjc6MTkiLDIwMjQtMDUtMDZUMDE6NDE6NDUrMDI6MDAsYTkzYjIzZWUtYjY4ZC00MzA5LTg0MmYtNDhiMTlkNDg4ODQ2LCIiLCJVc2UgYWNjZXNzIHJlc3RyaWN0aW9ucyBmb3IgdGhlIC9kb2MgZGlyZWN0b3J5LgogIElmIHlvdSB1c2UgQXBhY2hlIHlvdSBtaWdodCB1c2UgdGhpcyBpbiB5b3VyIGFjY2Vzcy5jb25mOgoKICA8RGlyZWN0b3J5IC91c3IvZG9jPgogIEFsbG93T3ZlcnJpZGUgTm9uZQogIG9yZGVyIGRlbnksIGFsbG93CiAgZGVueSBmcm9tIGFsbAogIGFsbG93IGZyb20gbG9jYWxob3N0CiAgPC9EaXJlY3Rvcnk+IiwiIiwiIiwiCkRldGFpbHM6Ci9kb2MgZGlyZWN0b3J5IGJyb3dzYWJsZQooT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTAwNTYpClZlcnNpb24gdXNlZDogMjAyMy0wOC0wMVQxNToyOToxMCswMjowMAoiLCIiLCIiLCIiLCIiCjE5Mi4xNjguMS4yOSxNRVRBU1BMT0lUQUJMRSwyMSx0Y3AsNi40LE1lZGl1bSw4MCwiTWl0aWdhdGlvbiIsIkFub255bW91cyBGVFAgTG9naW4gUmVwb3J0aW5nIiwiUmVwb3J0cyBpZiB0aGUgcmVtb3RlIEZUUCBTZXJ2ZXIgYWxsb3dzIGFub255bW91cyBsb2dpbnMuIiwiSXQgd2FzIHBvc3NpYmxlIHRvIGxvZ2luIHRvIHRoZSByZW1vdGUgRlRQIHNlcnZpY2Ugd2l0aCB0aGUgZm9sbG93aW5nIGFub255bW91cyBhY2NvdW50KHMpOgoKYW5vbnltb3VzOmFub255bW91c0BleGFtcGxlLmNvbQpmdHA6YW5vbnltb3VzQGV4YW1wbGUuY29tCgoiLDEuMy42LjEuNC4xLjI1NjIzLjEuMC45MDA2MDAsIkNWRS0xOTk5LTA0OTciLGE2YTM2OTEyLTZjZjMtNDEyMC04OWNkLTA4YWJlMDRjYzE4OSwiMDYvMDUvMjAyNCAwMToyNzoxOSIsMjAyNC0wNS0wNlQwMTo0MTo0NSswMjowMCwzOGI4OGZmNC1iYTM0LTQ3NjItODM0ZC1iYjFmNWQ2Y2QxNjQsIkJhc2VkIG9uIHRoZSBmaWxlcyBhY2Nlc3NpYmxlIHZpYSB0aGlzIGFub255bW91cyBGVFAgbG9naW4gYW5kCiAgdGhlIHBlcm1pc3Npb25zIG9mIHRoaXMgYWNjb3VudCBhbiBhdHRhY2tlciBtaWdodCBiZSBhYmxlIHRvOgoKICAtIGdhaW4gYWNjZXNzIHRvIHNlbnNpdGl2ZSBmaWxlcwoKICAtIHVwbG9hZCBvciBkZWxldGUgZmlsZXMuIiwiSWYgeW91IGRvIG5vdCB3YW50IHRvIHNoYXJlIGZpbGVzLCB5b3Ugc2hvdWxkIGRpc2FibGUgYW5vbnltb3VzCiAgbG9naW5zLiIsIiIsIkEgaG9zdCB0aGF0IHByb3ZpZGVzIGFuIEZUUCBzZXJ2aWNlIG1heSBhZGRpdGlvbmFsbHkgcHJvdmlkZQogIEFub255bW91cyBGVFAgYWNjZXNzIGFzIHdlbGwuIFVuZGVyIHRoaXMgYXJyYW5nZW1lbnQsIHVzZXJzIGRvIG5vdCBzdHJpY3RseSBuZWVkIGFuIGFjY291bnQgb24gdGhlCiAgaG9zdC4gSW5zdGVhZCB0aGUgdXNlciB0eXBpY2FsbHkgZW50ZXJzICdhbm9ueW1vdXMnIG9yICdmdHAnIHdoZW4gcHJvbXB0ZWQgZm9yIHVzZXJuYW1lLiBBbHRob3VnaAogIHVzZXJzIGFyZSBjb21tb25seSBhc2tlZCB0byBzZW5kIHRoZWlyIGVtYWlsIGFkZHJlc3MgYXMgdGhlaXIgcGFzc3dvcmQsIGxpdHRsZSB0byBubyB2ZXJpZmljYXRpb24KICBpcyBhY3R1YWxseSBwZXJmb3JtZWQgb24gdGhlIHN1cHBsaWVkIGRhdGEuCgogIFJlbWFyazogTklTVCBkb24ndCBzZWUgJ2NvbmZpZ3VyYXRpb24gaXNzdWVzJyBhcyBzb2Z0d2FyZSBmbGF3cyBzbyB0aGUgcmVmZXJlbmNlZCBDVkUgaGFzIGEKICBzZXZlcml0eSBvZiAwLjAuIFRoZSBzZXZlcml0eSBvZiB0aGlzIFZUIGhhcyBiZWVuIHJhaXNlZCBieSBHcmVlbmJvbmUgdG8gc3RpbGwgcmVwb3J0IGEKICBjb25maWd1cmF0aW9uIGlzc3VlIG9uIHRoZSB0YXJnZXQuIiwiCkRldGFpbHM6CkFub255bW91cyBGVFAgTG9naW4gUmVwb3J0aW5nCihPSUQ6IDEuMy42LjEuNC4xLjI1NjIzLjEuMC45MDA2MDApClZlcnNpb24gdXNlZDogMjAyMS0xMC0yMFQxMTowMzoyOSswMjowMAoiLCIiLCIiLCIiLCIiCjE5Mi4xNjguMS4yOSxNRVRBU1BMT0lUQUJMRSw4MCx0Y3AsNC4zLE1lZGl1bSw5OSwiVmVuZG9yRml4IiwiQXBhY2hlIEhUVFAgU2VydmVyIGh0dHBPbmx5IENvb2tpZSBJbmZvcm1hdGlvbiBEaXNjbG9zdXJlIFZ1bG5lcmFiaWxpdHkiLCJBcGFjaGUgSFRUUCBTZXJ2ZXIgaXMgcHJvbmUgdG8gYSBjb29raWUgaW5mb3JtYXRpb24gZGlzY2xvc3VyZSB2dWxuZXJhYmlsaXR5LiIsIlZ1bG5lcmFiaWxpdHkgd2FzIGRldGVjdGVkIGFjY29yZGluZyB0byB0aGUgVnVsbmVyYWJpbGl0eSBEZXRlY3Rpb24gTWV0aG9kLiIsMS4zLjYuMS40LjEuMjU2MjMuMS4wLjkwMjgzMCwiQ1ZFLTIwMTItMDA1MyIsYTZhMzY5MTItNmNmMy00MTIwLTg5Y2QtMDhhYmUwNGNjMTg5LCIwNi8wNS8yMDI0IDAxOjI3OjE5IiwyMDI0LTA1LTA2VDAxOjQxOjQ1KzAyOjAwLDZiOTMyY2IwLTc3NWYtNGJiYS04ZmMzLTczMTdiMzI2NzU0YywiU3VjY2Vzc2Z1bCBleHBsb2l0YXRpb24gd2lsbCBhbGxvdyBhdHRhY2tlcnMgdG8gb2J0YWluIHNlbnNpdGl2ZSBpbmZvcm1hdGlvbgogIHRoYXQgbWF5IGFpZCBpbiBmdXJ0aGVyIGF0dGFja3MuIiwiVXBkYXRlIHRvIEFwYWNoZSBIVFRQIFNlcnZlciB2ZXJzaW9uIDIuMi4yMiBvciBsYXRlci4iLCJBcGFjaGUgSFRUUCBTZXJ2ZXIgdmVyc2lvbnMgMi4yLjAgdGhyb3VnaCAyLjIuMjEuIiwiVGhlIGZsYXcgaXMgZHVlIHRvIGFuIGVycm9yIHdpdGhpbiB0aGUgZGVmYXVsdCBlcnJvciByZXNwb25zZSBmb3IKICBzdGF0dXMgY29kZSA0MDAgd2hlbiBubyBjdXN0b20gRXJyb3JEb2N1bWVudCBpcyBjb25maWd1cmVkLCB3aGljaCBjYW4gYmUKICBleHBsb2l0ZWQgdG8gZXhwb3NlICdodHRwT25seScgY29va2llcy4iLCIKRGV0YWlsczoKQXBhY2hlIEhUVFAgU2VydmVyICdodHRwT25seScgQ29va2llIEluZm9ybWF0aW9uIERpc2Nsb3N1cmUgVnVsbmVyYWJpbGl0eQooT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuOTAyODMwKQpWZXJzaW9uIHVzZWQ6IDIwMjItMDQtMjdUMTQ6MDE6NTIrMDI6MDAKIiwiUHJvZHVjdDogY3BlOi9hOmFwYWNoZTpodHRwX3NlcnZlcjoyLjIuOApNZXRob2Q6IEFwYWNoZSBIVFRQIFNlcnZlciBEZXRlY3Rpb24gQ29uc29saWRhdGlvbgooT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTE3MjMyKQoiLCIiLCJERk4tQ0VSVC0yMDE1LTAwODIsREZOLUNFUlQtMjAxNC0xNTkyLERGTi1DRVJULTIwMTQtMDYzNSxERk4tQ0VSVC0yMDEzLTEzMDcsREZOLUNFUlQtMjAxMi0xMjc2LERGTi1DRVJULTIwMTItMTExMixERk4tQ0VSVC0yMDEyLTA5MjgsREZOLUNFUlQtMjAxMi0wNzU4LERGTi1DRVJULTIwMTItMDc0NCxERk4tQ0VSVC0yMDEyLTA1NjgsREZOLUNFUlQtMjAxMi0wNDI1LERGTi1DRVJULTIwMTItMDQyNCxERk4tQ0VSVC0yMDEyLTAzODcsREZOLUNFUlQtMjAxMi0wMzQzLERGTi1DRVJULTIwMTItMDMzMixERk4tQ0VSVC0yMDEyLTAzMDYsREZOLUNFUlQtMjAxMi0wMjY0LERGTi1DRVJULTIwMTItMDIwMyxERk4tQ0VSVC0yMDEyLTAxODgsQ0ItSzE1LzAwODAsQ0ItSzE0LzE1MDUsQ0ItSzE0LzA2MDgiLCIiCjE5Mi4xNjguMS4yOSxNRVRBU1BMT0lUQUJMRSwsLDAuMCxMb2csODAsIiIsIkFwYWNoZSBIVFRQIFNlcnZlciBEZXRlY3Rpb24gQ29uc29saWRhdGlvbiIsIkNvbnNvbGlkYXRpb24gb2YgQXBhY2hlIEhUVFAgU2VydmVyIGRldGVjdGlvbnMuIiwiRGV0ZWN0ZWQgQXBhY2hlIEhUVFAgU2VydmVyCgpWZXJzaW9uOiAgICAgICAyLjIuOApMb2NhdGlvbjogICAgICA4MC90Y3AKQ1BFOiAgICAgICAgICAgY3BlOi9hOmFwYWNoZTpodHRwX3NlcnZlcjoyLjIuOAoKQ29uY2x1ZGVkIGZyb20gdmVyc2lvbi9wcm9kdWN0IGlkZW50aWZpY2F0aW9uIHJlc3VsdDoKU2VydmVyOiBBcGFjaGUvMi4yLjggKFVidW50dSkgREFWLzIKIiwxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTE3MjMyLCIiLGE2YTM2OTEyLTZjZjMtNDEyMC04OWNkLTA4YWJlMDRjYzE4OSwiMDYvMDUvMjAyNCAwMToyNzoxOSIsMjAyNC0wNS0wNlQwMTo0MTo0NSswMjowMCxjOTczMzg5YS0yNDEwLTQ5ZGUtOGYwYS01YzkxZDg5MjE5NTQsIiIsIiIsIiIsIiIsIgpEZXRhaWxzOgpBcGFjaGUgSFRUUCBTZXJ2ZXIgRGV0ZWN0aW9uIENvbnNvbGlkYXRpb24KKE9JRDogMS4zLjYuMS40LjEuMjU2MjMuMS4wLjExNzIzMikKVmVyc2lvbiB1c2VkOiAyMDI0LTAzLTA4VDE2OjM3OjEwKzAyOjAwCiIsIiIsIiIsIiIsIiIKMTkyLjE2OC4xLjI5LE1FVEFTUExPSVRBQkxFLDgwMDksdGNwLDAuMCxMb2csODAsIiIsIkFwYWNoZSBKU2VydiBQcm90b2NvbCAoQUpQKSB2MS4zIERldGVjdGlvbiIsIlRoZSBzY3JpcHQgZGV0ZWN0cyBhIHNlcnZpY2Ugc3VwcG9ydGluZyB0aGUKICBBcGFjaGUgSlNlcnYgUHJvdG9jb2wgKEFKUCkgdmVyc2lvbiAxLjMuIiwiQSBzZXJ2aWNlIHN1cHBvcnRpbmcgdGhlIEFwYWNoZSBKU2VydiBQcm90b2NvbCAoQUpQKSB2MS4zIHNlZW1zIHRvIGJlIHJ1bm5pbmcgb24gdGhpcyBwb3J0LgoiLDEuMy42LjEuNC4xLjI1NjIzLjEuMC4xMDgwODIsIiIsYTZhMzY5MTItNmNmMy00MTIwLTg5Y2QtMDhhYmUwNGNjMTg5LCIwNi8wNS8yMDI0IDAxOjI3OjE5IiwyMDI0LTA1LTA2VDAxOjQxOjQ1KzAyOjAwLDBiZDJhYzNkLTM2ZDItNDRlNy04NTdlLWMyYzNmZDBiYTEzNiwiIiwiIiwiIiwiIiwiCkRldGFpbHM6CkFwYWNoZSBKU2VydiBQcm90b2NvbCAoQUpQKSB2MS4zIERldGVjdGlvbgooT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTA4MDgyKQpWZXJzaW9uIHVzZWQ6IDIwMjMtMDctMjVUMDc6MDU6NTgrMDI6MDAKIiwiIiwiIiwiIiwiIgoxOTIuMTY4LjEuMjksTUVUQVNQTE9JVEFCTEUsODAwOSx0Y3AsOS44LEhpZ2gsOTksIlZlbmRvckZpeCIsIkFwYWNoZSBUb21jYXQgQUpQIFJDRSBWdWxuZXJhYmlsaXR5IChHaG9zdGNhdCkiLCJBcGFjaGUgVG9tY2F0IGlzIHByb25lIHRvIGEgcmVtb3RlIGNvZGUgZXhlY3V0aW9uIHZ1bG5lcmFiaWxpdHkKICAoZHViYmVkICdHaG9zdGNhdCcpIGluIHRoZSBBSlAgY29ubmVjdG9yLiIsIkl0IHdhcyBwb3NzaWJsZSB0byByZWFkIHRoZSBmaWxlICIiL1dFQi1JTkYvd2ViLnhtbCIiIHRocm91Z2ggdGhlIEFKUCBjb25uZWN0b3IuCgpSZXN1bHQ6CgpBQiA4XHgwMDA0IMODXHgwMDg4IFx4MDAwMk9LICBceDAwMDEgXHgwMDBDQ29udGVudC1UeXBlICBceDAwMUN0ZXh0L2h0bWw7Y2hhcnNldD1JU08tODg1OS0xIEFCXHgwMDFGw4PCvFx4MDAwM1x4MDAxRsODwrg8IS0tCiAgTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZSBvciBtb3JlCiAgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZSBkaXN0cmlidXRlZCB3aXRoCiAgdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLgogIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlIHRvIFlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wCiAgKHRoZSAiIkxpY2Vuc2UiIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aAogIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0CgogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKCiAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICIiQVMgSVMiIiBCQVNJUywKICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCi0tPgo8P3htbCB2ZXJzaW9uPSIiMS4wIiIgZW5jb2Rpbmc9IiJJU08tODg1OS0xIiI/Pgo8IURPQ1RZUEUgaHRtbCBQVUJMSUMgIiItLy9XM0MvL0RURCBYSFRNTCAxLjAgU3RyaWN0Ly9FTiIiCiAgICIiaHR0cDovL3d3dy53My5vcmcvVFIveGh0bWwxL0RURC94aHRtbDEtc3RyaWN0LmR0ZCIiPgoKPGh0bWwgeG1sbnM9IiJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sIiIgeG1sOmxhbmc9IiJlbiIiIGxhbmc9IiJlbiIiPgogICAgPGhlYWQ+CiAgICA8dGl0bGU+QXBhY2hlIFRvbWNhdC81LjU8L3RpdGxlPgogICAgPHN0eWxlIHR5cGU9IiJ0ZXh0L2NzcyIiPgogICAgLyo8IVtDREFUQVsqLwogICAgICBib2R5IHsKICAgICAgICAgIGNvbG9yOiAjMDAwMDAwOwogICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI0ZGRkZGRjsKCSAgZm9udC1mYW1pbHk6IEFyaWFsLCAiIlRpbWVzIE5ldyBSb21hbiIiLCBUaW1lcywgc2VyaWY7CiAgICAgICAgICBtYXJnaW46IDEwcHggMHB4OwogICAgICB9CgogICAgaW1nIHsKICAgICAgIGJvcmRlcjogbm9uZTsKICAgIH0KICAgIAogICAgYTpsaW5rLCBhOnZpc2l0ZWQgewogICAgICAgIGNvbG9yOiBibHVlCiAgICB9CgogICAgdGggewogICAgICAgIGZvbnQtZmFtaWx5OiBWZXJkYW5hLCAiIlRpbWVzIE5ldyBSb21hbiIiLCBUaW1lcywgc2VyaWY7CiAgICAgICAgZm9udC1zaXplOiAxMTAlOwogICAgICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7CiAgICAgICAgZm9udC1zdHlsZTogaXRhbGljOwogICAgICAgIGJhY2tncm91bmQ6ICNEMkE0MUM7CiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDsKICAgIH0KCiAgICB0ZCB7CiAgICAgICAgY29sb3I6ICMwMDAwMDA7Cglmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKICAgIH0KICAgIAogICAgdGQubWVudSB7CiAgICAgICAgYmFja2dyb3VuZDogI0ZGREM3NTsKICAgIH0KCiAgICAuY2VudGVyIHsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICB9CgogICAgLmNvZGUgewogICAgICAgIGNvbG9yOiAjMDAwMDAwOwogICAgICAgIGZvbnQtZmFtaWx5OiAiIkNvdXJpZXIgTmV3IiIsIENvdXJpZXIsIG1vbm9zcGFjZTsKICAgICAgICBmb250LXNpemU6IDExMCU7CiAgICAgICAgbWFyZ2luLWxlZnQ6IDIuNWVtOwogICAgfQogICAgCiAgICAgI2Jhbm5lciB7CiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTJweDsKICAgICB9CgogICAgIHAjY29uZ3JhdHMgewogICAgICAgICBtYXJnaW4tdG9wOiAwOwogICAgICAgICBmb250LXdlaWdodDogYm9sZDsKICAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyOwogICAgIH0KCiAgICAgcCNmb290ZXIgewogICAgICAgICB0ZXh0LWFsaWduOiByaWdodDsKICAgICAgICAgZm9udC1zaXplOiA4MCU7CiAgICAgfQogICAgIC8qXV0+Ki8KICAgPC9zdHlsZT4KPC9oZWFkPgoKPGJvZHk+Cgo8IS0tIEhlYWRlciAtLT4KPHRhYmxlIGlkPSIiYmFubmVyIiIgd2lkdGg9IiIxMDAlIiI+CiAgICA8dHI+CiAgICAgIDx0ZCBhbGlnbj0iImxlZnQiIiBzdHlsZT0iIndpZHRoOjEzMHB4IiI+CiAgICAgICAgPGEgaHJlZj0iImh0dHA6Ly90b21jYXQuYXBhY2hlLm9yZy8iIj4KCSAgPGltZyBzcmM9IiJ0b21jYXQuZ2lmIiIgaGVpZ2h0PSIiOTIiIiB3aWR0aD0iIjEzMCIiIGFsdD0iIlRoZSBNaWdodHkgVG9tY2F0IC0gTUVPVyEiIi8+Cgk8L2E+CiAgICAgIDwvdGQ+CiAgICAgIDx0ZCBhbGlnbj0iImxlZnQiIiB2YWxpZ249IiJ0b3AiIj48Yj5BcGFjaGUgVG9tY2F0LzUuNTwvYj48L3RkPgogICAgICA8dGQgYWxpZ249IiJyaWdodCIiPgogICAgICAgIDxhIGhyZWY9IiJodHRwOi8vd3d3LmFwYWNoZS5vcmcvIiI+CgkgIDxpbWcgc3JjPSIiYXNmLWxvZ28td2lkZS5naWYiIiBoZWlnaHQ9IiI1MSIiIHdpZHRoPSIiNTM3IiIgYWx0PSIiVGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIiIvPgoJPC9hPgogICAgICAgPC90ZD4KICAgICA8L3RyPgo8L3RhYmxlPgoKPHRhYmxlPgogICAgPHRyPgoKICAgICAgICA8IS0tIFRhYmxlIG9mIENvbnRlbnRzIC0tPgogICAgICAgIDx0ZCB2YWxpZ249IiJ0b3AiIj4KICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSIiMTAwJSIiIGJvcmRlcj0iIjEiIiBjZWxsc3BhY2luZz0iIjAiIiBjZWxscGFkZGluZz0iIjMiIj4KICAgICAgICAgICAgICAgIDx0cj4KCQkgIDx0aD5BZG1pbmlzdHJhdGlvbjwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgoJCSAgPHRkIGNsYXNzPSIibWVudSIiPgoJCSAgICA8YSBocmVmPSIibWFuYWdlci9zdGF0dXMiIj5TdGF0dXM8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiYWRtaW4iIj5Ub21jYXQmbmJzcDtBZG1pbmlzdHJhdGlvbjwvYT48YnIvPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiJtYW5hZ2VyL2h0bWwiIj5Ub21jYXQmbmJzcDtNYW5hZ2VyPC9hPjxici8+CiAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgoKCSAgICA8YnIgLz4KICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSIiMTAwJSIiIGJvcmRlcj0iIjEiIiBjZWxsc3BhY2luZz0iIjAiIiBjZWxscGFkZGluZz0iIjMiIj4KICAgICAgICAgICAgICAgIDx0cj4KCQkgIDx0aD5Eb2N1bWVudGF0aW9uPC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iIm1lbnUiIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiUkVMRUFTRS1OT1RFUy50eHQiIj5SZWxlYXNlJm5ic3A7Tm90ZXM8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIidG9tY2F0LWRvY3MvY2hhbmdlbG9nLmh0bWwiIj5DaGFuZ2UmbmJzcDtMb2c8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIidG9tY2F0LWRvY3MiIj5Ub21jYXQmbmJzcDtEb2N1bWVudGF0aW9uPC9hPjxici8+ICAgICAgICAgICAgICAgICAgICAgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgICAgJm5ic3A7CgkJICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgoJICAgIAogICAgICAgICAgICA8YnIvPgogICAgICAgICAgICA8dGFibGUgd2lkdGg9IiIxMDAlIiIgYm9yZGVyPSIiMSIiIGNlbGxzcGFjaW5nPSIiMCIiIGNlbGxwYWRkaW5nPSIiMyIiPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICA8dGg+VG9tY2F0IE9ubGluZTwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IiJtZW51IiI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iImh0dHA6Ly90b21jYXQuYXBhY2hlLm9yZy8iIj5Ib21lJm5ic3A7UGFnZTwvYT48YnIvPgoJCSAgICA8YSBocmVmPSIiaHR0cDovL3RvbWNhdC5hcGFjaGUub3JnL2ZhcS8iIj5GQVE8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiaHR0cDovL3RvbWNhdC5hcGFjaGUub3JnL2J1Z3JlcG9ydC5odG1sIiI+QnVnJm5ic3A7RGF0YWJhc2U8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiaHR0cDovL2lzc3Vlcy5hcGFjaGUub3JnL2J1Z3ppbGxhL2J1Z2xpc3QuY2dpP2J1Z19zdGF0dXM9VU5DT05GSVJNRUQmYW1wO2J1Z19zdGF0dXM9TkVXJmFtcDtidWdfc3RhdHVzPUFTU0lHTkVEJmFtcDtidWdfc3RhdHVzPVJFT1BFTkVEJmFtcDtidWdfc3RhdHVzPVJFU09MVkVEJmFtcDtyZXNvbHV0aW9uPUxBVEVSJmFtcDtyZXNvbHV0aW9uPVJFTUlORCZhbXA7cmVzb2x1dGlvbj0tLS0mYW1wO2J1Z2lkdHlwZT1pbmNsdWRlJmFtcDtwcm9kdWN0PVRvbWNhdCs1JmFtcDtjbWR0eXBlPWRvaXQmYW1wO29yZGVyPUltcG9ydGFuY2UiIj5PcGVuIEJ1Z3M8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiaHR0cDovL21haWwtYXJjaGl2ZXMuYXBhY2hlLm9yZy9tb2RfbWJveC90b21jYXQtdXNlcnMvIiI+VXNlcnMmbmJzcDtNYWlsaW5nJm5ic3A7TGlzdDwvYT48YnIvPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiJodHRwOi8vbWFpbC1hcmNoaXZlcy5hcGFjaGUub3JnL21vZF9tYm94L3RvbWNhdC1kZXYvIiI+RGV2ZWxvcGVycyZuYnNwO01haWxpbmcmbmJzcDtMaXN0PC9hPjxici8+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iImlyYzovL2lyYy5mcmVlbm9kZS5uZXQvI3RvbWNhdCIiPklSQzwvYT48YnIvPgoJCSAgICAmbmJzcDsKICAgICAgICAgICAgICAgICAgPC90ZD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgIDwvdGFibGU+CgkgICAgCiAgICAgICAgICAgIDxici8+CiAgICAgICAgICAgIDx0YWJsZSB3aWR0aD0iIjEwMCUiIiBib3JkZXI9IiIxIiIgY2VsbHNwYWNpbmc9IiIwIiIgY2VsbHBhZGRpbmc9IiIzIiI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0aD5FeGFtcGxlczwvdGg+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICA8dGQgY2xhc3M9IiJtZW51IiI+CiAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iImpzcC1leGFtcGxlcy8iIj5KU1AmbmJzcDtFeGFtcGxlczwvYT48YnIvPgogICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiJzZXJ2bGV0cy1leGFtcGxlcy8iIj5TZXJ2bGV0Jm5ic3A7RXhhbXBsZXM8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIid2ViZGF2LyIiPldlYkRBViZuYnNwO2NhcGFiaWxpdGllczwvYT48YnIvPgogICAgIAkJICAgICZuYnNwOwogICAgICAgICAgICAgICAgICA8L3RkPgogICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgPC90YWJsZT4KCSAgICAKICAgICAgICAgICAgPGJyLz4KICAgICAgICAgICAgPHRhYmxlIHdpZHRoPSIiMTAwJSIiIGJvcmRlcj0iIjEiIiBjZWxsc3BhY2luZz0iIjAiIiBjZWxscGFkZGluZz0iIjMiIj4KICAgICAgICAgICAgICAgIDx0cj4KCQkgIDx0aD5NaXNjZWxsYW5lb3VzPC90aD4KICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgIDx0ZCBjbGFzcz0iIm1lbnUiIj4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiaHR0cDovL2phdmEuc3VuLmNvbS9wcm9kdWN0cy9qc3AiIj5TdW4ncyZuYnNwO0phdmEmbmJzcDtTZXJ2ZXImbmJzcDtQYWdlcyZuYnNwO1NpdGU8L2E+PGJyLz4KICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSIiaHR0cDovL2phdmEuc3VuLmNvbS9wcm9kdWN0cy9zZXJ2bGV0IiI+U3VuJ3MmbmJzcDtTZXJ2bGV0Jm5ic3A7U2l0ZTwvYT48YnIvPgogICAgCQkgICAgJm5ic3A7CiAgICAgICAgICAgICAgICAgIDwvdGQ+CiAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICA8L3RhYmxlPgogICAgICAgIDwvdGQ+CgogICAgICAgIDx0ZCBzdHlsZT0iIndpZHRoOjIwcHgiIj4mbmJzcDs8L3RkPgoJCiAgICAgICAgPCEtLSBCb2R5IC0tPgogICAgICAgIDx0ZCBhbGlnbj0iImxlZnQiIiB2YWxpZ249IiJ0b3AiIj4KICAgICAgICAgIDxwIGlkPSIiY29uZ3JhdHMiIj5JZiB5b3UncmUgc2VlaW5nIHRoaXMgcGFnZSB2aWEgYSB3ZWIgYnJvd3NlciwgaXQgbWVhbnMgeW91J3ZlIHNldHVwIFRvbWNhdCBzdWNjZXNzZnVsbHkuIENvbmdyYXR1bGF0aW9ucyE8L3A+CiAKICAgICAgICAgIDxwPkFzIHlvdSBtYXkgaGF2ZSBndWVzc2VkIGJ5IG5vdywgdGhpcyBpcyB0aGUgZGVmYXVsdCBUb21jYXQgaG9tZSBwYWdlLiBJdCBjYW4gYmUgZm91bmQgb24gdGhlIGxvY2FsIGZpbGVzeXN0ZW0gYXQ6PC9wPgogICAgICAgICAgPHAgY2xhc3M9IiJjb2RlIiI+JENBVEFMSU5BX0hPTUUvd2ViYXBwcy9ST09UL2luZGV4LmpzcDwvcD4KCSAgCiAgICAgICAgICA8cD53aGVyZSAiIiRDQVRBTElOQV9IT01FIiIgaXMgdGhlIHJvb3Qgb2YgdGhlIFRvbWNhdCBpbnN0YWxsYXRpb24gZGlyZWN0b3J5LiBJZiB5b3UncmUgc2VlaW5nIHRoaXMgcGFnZSwgYW5kIHlvdSBkb24ndCB0aGluayB5b3Ugc2hvdWxkIGJlLCB0aGVuIGVpdGhlciB5b3UncmUgZWl0aGVyIGEgdXNlciB3aG8gaGFzIGFycml2ZWQgYXQgbmV3IGluc3RhbGxhdGlvbiBvZiBUb21jYXQsIG9yIHlvdSdyZSBhbiBhZG1pbmlzdHJhdG9yIHdobyBoYXNuJ3QgZ290IGhpcy9oZXIgc2V0dXAgcXVpdGUgcmlnaHQuIFByb3ZpZGluZyB0aGUgbGF0dGVyIGlzIHRoZSBjYXNlLCBwbGVhc2UgcmVmZXIgdG8gdGhlIDxhIGhyZWY9IiJ0b21jYXQtZG9jcyIiPlRvbWNhdCBEb2N1bWVudGF0aW9uPC9hPiBmb3IgbW9yZSBkZXRhaWxlZCBzZXR1cCBhbmQgYWRtaW5pc3RyYXRpb24gaW5mb3JtYXRpb24gdGhhbiBpcyBmb3VuZCBpbiB0aGUgSU5TVEFMTCBmaWxlLjwvcD4KCiAgICAgICAgICAgIDxwPjxiPk5PVEU6PC9iPiBUaGlzIHBhZ2UgaXMgcHJlY29tcGlsZWQuIElmIHlvdSBjaGFuZ2UgaXQsIHRoaXMgcGFnZSB3aWxsIG5vdCBjaGFuZ2Ugc2luY2UKICAgICAgICAgICAgICAgICAgaXQgd2FzIGNvbXBpbGVkIGludG8gYSBzZXJ2bGV0IGF0IGJ1aWxkIHRpbWUuCiAgICAgICAgICAgICAgICAgIChTZWUgPHR0PiRDQVRBTElOQV9IT01FL3dlYmFwcHMvUk9PVC9XRUItSU5GL3dlYi54bWw8L3R0PiBhcyB0byBob3cgaXQgd2FzIG1hcHBlZC4pCiAgICAgICAgICAgIDwvcD4KCiAgICAgICAgICAgIDxwPjxiPk5PVEU6IEZvciBzZWN1cml0eSByZWFzb25zLCB1c2luZyB0aGUgYWRtaW5pc3RyYXRpb24gd2ViYXBwCiAgICAgICAgICAgIGlzIHJlc3RyaWN0ZWQgdG8gdXNlcnMgd2l0aCByb2xlICIiYWRtaW4iIi4gVGhlIG1hbmFnZXIgd2ViYXBwCiAgICAgICAgICAgIGlzIHJlc3RyaWN0ZWQgdG8gdXNlcnMgd2l0aCByb2xlICIibWFuYWdlciIiLjwvYj4KICAgICAgICAgICAgVXNlcnMgYXJlIGRlZmluZWQgaW4gPGNvZGU+JENBVEFMSU5BX0hPTUUvY29uZi90b21jYXQtdXNlcnMueG1sPC9jb2RlPi48L3A+CgogICAgICAgICAgICA8cD5JbmNsdWRlZCB3aXRoIHRoaXMgcmVsZWFzZSBhcmUgYSBob3N0IG9mIHNhbXBsZSBTZXJ2bGV0cyBhbmQgSlNQcyAod2l0aCBhc3NvY2lhdGVkIHNvdXJjZSBjb2RlKSwgZXh0ZW5zaXZlIGRvY3VtZW50YXRpb24gKGluY2x1ZGluZyB0aGUgU2VydmxldCAyLjQgYW5kIEpTUCAyLjAgQVBJIEphdmFEb2MpLCBhbmQgYW4gaW50cm9kdWN0b3J5IGd1aWRlIHRvIGRldmVsb3Bpbmcgd2ViIGFwcGxpY2F0aW9ucy48L3A+CgogICAgICAgICAgICA8cD5Ub21jYXQgbWFpbGluZyBsaXN0cyBhcmUgYXZhaWxhYmxlIGF0IHRoZSBUb21jYXQgcHJvamVjdCB3ZWIgc2l0ZTo8L3A+CgogICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgPGxpPjxiPjxhIGhyZWY9IiJtYWlsdG86dXNlcnNAdG9tY2F0LmFwYWNoZS5vcmciIj51c2Vyc0B0b21jCiIsMS4zLjYuMS40LjEuMjU2MjMuMS4wLjE0MzU0NSwiQ1ZFLTIwMjAtMTkzOCIsYTZhMzY5MTItNmNmMy00MTIwLTg5Y2QtMDhhYmUwNGNjMTg5LCIwNi8wNS8yMDI0IDAxOjI3OjE5IiwyMDI0LTA1LTA2VDAxOjQxOjQ1KzAyOjAwLDE5NWFlMWQyLTM5YzgtNDMyZC1hMTZmLTQ2Yzk4NzEwNTRmNywiIiwiVXBkYXRlIEFwYWNoZSBUb21jYXQgdG8gdmVyc2lvbiA3LjAuMTAwLCA4LjUuNTEsIDkuMC4zMSBvciBsYXRlci4gRm9yIG90aGVyIHByb2R1Y3RzCiAgdXNpbmcgVG9tY2F0IHBsZWFzZSBjb250YWN0IHRoZSB2ZW5kb3IgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gZml4ZWQgdmVyc2lvbnMuIiwiQXBhY2hlIFRvbWNhdCB2ZXJzaW9ucyBwcmlvciA3LjAuMTAwLCA4LjUuNTEgb3IgOS4wLjMxIHdoZW4gdGhlIEFKUCBjb25uZWN0b3IKICBpcyBlbmFibGVkLgoKICBPdGhlciBwcm9kdWN0cyBsaWtlIEpCb3NzIG9yIFdpbGRmbHkgd2hpY2ggYXJlIHVzaW5nIFRvbWNhdCBtaWdodCBiZSBhZmZlY3RlZCBhcyB3ZWxsLiIsIkFwYWNoZSBUb21jYXQgc2VydmVyIGhhcyBhIGZpbGUgY29udGFpbmluZyB2dWxuZXJhYmlsaXR5LCB3aGljaCBjYW4gYmUgdXNlZCBieQogIGFuIGF0dGFja2VyIHRvIHJlYWQgb3IgaW5jbHVkZSBhbnkgZmlsZXMgaW4gYWxsIHdlYmFwcCBkaXJlY3RvcmllcyBvbiBUb21jYXQsIHN1Y2ggYXMgd2ViYXBwIGNvbmZpZ3VyYXRpb24gZmlsZXMKICBvciBzb3VyY2UgY29kZS4iLCJTZW5kcyBhIGNyYWZ0ZWQgQUpQIHJlcXVlc3QgYW5kIGNoZWNrcyB0aGUgcmVzcG9uc2UuCkRldGFpbHM6CkFwYWNoZSBUb21jYXQgQUpQIFJDRSBWdWxuZXJhYmlsaXR5IChHaG9zdGNhdCkKKE9JRDogMS4zLjYuMS40LjEuMjU2MjMuMS4wLjE0MzU0NSkKVmVyc2lvbiB1c2VkOiAyMDIzLTA3LTA2VDA3OjA1OjM2KzAyOjAwCiIsIiIsIiIsIkRGTi1DRVJULTIwMjEtMTczNixERk4tQ0VSVC0yMDIwLTE1MDgsREZOLUNFUlQtMjAyMC0xNDEzLERGTi1DRVJULTIwMjAtMTI3NixERk4tQ0VSVC0yMDIwLTExMzQsREZOLUNFUlQtMjAyMC0wODUwLERGTi1DRVJULTIwMjAtMDgzNSxERk4tQ0VSVC0yMDIwLTA4MjEsREZOLUNFUlQtMjAyMC0wNTY5LERGTi1DRVJULTIwMjAtMDU1NyxERk4tQ0VSVC0yMDIwLTA1MDEsREZOLUNFUlQtMjAyMC0wMzgxLFdJRC1TRUMtMjAyNC0wNTI4LFdJRC1TRUMtMjAyMy0yNDgwLENCLUsyMC8wNzExLENCLUsyMC8wNzA1LENCLUsyMC8wNjkzLENCLUsyMC8wNTU1LENCLUsyMC8wNTQzLENCLUsyMC8wMTU0IiwiIgoxOTIuMTY4LjEuMjksTUVUQVNQTE9JVEFCTEUsODAsdGNwLDUuMCxNZWRpdW0sOTksIldpbGxOb3RGaXgiLCJhd2lraSA8PSAyMDEwMDEyNSBNdWx0aXBsZSBMRkkgVnVsbmVyYWJpbGl0aWVzIC0gQWN0aXZlIENoZWNrIiwiYXdpa2kgaXMgcHJvbmUgdG8gbXVsdGlwbGUgbG9jYWwgZmlsZSBpbmNsdWRlIChMRkkpCiAgdnVsbmVyYWJpbGl0aWVzIGJlY2F1c2UgaXQgZmFpbHMgdG8gcHJvcGVybHkgc2FuaXRpemUgdXNlci1zdXBwbGllZCBpbnB1dC4iLCJWdWxuZXJhYmxlIFVSTDogaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlL2luZGV4LnBocD9wYWdlPS9ldGMvcGFzc3dkCiIsMS4zLjYuMS40LjEuMjU2MjMuMS4wLjEwMzIxMCwiIixhNmEzNjkxMi02Y2YzLTQxMjAtODljZC0wOGFiZTA0Y2MxODksIjA2LzA1LzIwMjQgMDE6Mjc6MTkiLDIwMjQtMDUtMDZUMDE6NDE6NDUrMDI6MDAsNDE0MDk1YzctODFlNi00ODI0LTllYzMtOGExMGRmOTJhMjRmLCJBbiBhdHRhY2tlciBjYW4gZXhwbG9pdCB0aGlzIHZ1bG5lcmFiaWxpdHkgdG8gb2J0YWluIHBvdGVudGlhbGx5CiAgc2Vuc2l0aXZlIGluZm9ybWF0aW9uIGFuZCBleGVjdXRlIGFyYml0cmFyeSBsb2NhbCBzY3JpcHRzIGluIHRoZSBjb250ZXh0IG9mIHRoZSB3ZWJzZXJ2ZXIKICBwcm9jZXNzLiBUaGlzIG1heSBhbGxvdyB0aGUgYXR0YWNrZXIgdG8gY29tcHJvbWlzZSB0aGUgYXBwbGljYXRpb24gYW5kIHRoZSBob3N0LiIsIk5vIGtub3duIHNvbHV0aW9uIHdhcyBtYWRlIGF2YWlsYWJsZSBmb3IgYXQgbGVhc3Qgb25lIHllYXIKICBzaW5jZSB0aGUgZGlzY2xvc3VyZSBvZiB0aGlzIHZ1bG5lcmFiaWxpdHkuIExpa2VseSBub25lIHdpbGwgYmUgcHJvdmlkZWQgYW55bW9yZS4gR2VuZXJhbAogIHNvbHV0aW9uIG9wdGlvbnMgYXJlIHRvIHVwZ3JhZGUgdG8gYSBuZXdlciByZWxlYXNlLCBkaXNhYmxlIHJlc3BlY3RpdmUgZmVhdHVyZXMsIHJlbW92ZSB0aGUKICBwcm9kdWN0IG9yIHJlcGxhY2UgdGhlIHByb2R1Y3QgYnkgYW5vdGhlciBvbmUuIiwiYXdpa2kgdmVyc2lvbiAyMDEwMDEyNSBhbmQgcHJpb3IuIiwiIiwiU2VuZHMgYSBjcmFmdGVkIEhUVFAgR0VUIHJlcXVlc3QgYW5kIGNoZWNrcyB0aGUgcmVzcG9uc2UuCkRldGFpbHM6CmF3aWtpIDw9IDIwMTAwMTI1IE11bHRpcGxlIExGSSBWdWxuZXJhYmlsaXRpZXMgLSBBY3RpdmUgQ2hlY2sKKE9JRDogMS4zLjYuMS40LjEuMjU2MjMuMS4wLjEwMzIxMCkKVmVyc2lvbiB1c2VkOiAyMDIzLTEyLTEzVDA2OjA1OjIzKzAyOjAwCiIsIiIsIiIsIiIsIiIKMTkyLjE2OC4xLjI5LE1FVEFTUExPSVRBQkxFLDgwLHRjcCwwLjAsTG9nLDgwLCIiLCJDR0kgU2Nhbm5pbmcgQ29uc29saWRhdGlvbiIsIlRoZSBzY3JpcHQgY29uc29saWRhdGVzIHZhcmlvdXMgaW5mb3JtYXRpb24gZm9yIENHSSAoV2ViCiAgYXBwbGljYXRpb24pIHNjYW5uaW5nLgoKICBUaGlzIGluZm9ybWF0aW9uIGlzIGJhc2VkIG9uIHRoZSBmb2xsb3dpbmcgc2NyaXB0cyAvIHNldHRpbmdzOgoKICAtIEhUVFAtVmVyc2lvbiBEZXRlY3Rpb24gKE9JRDogMS4zLjYuMS40LjEuMjU2MjMuMS4wLjEwMDAzNCkKCiAgLSBObyA0MDQgY2hlY2sgKE9JRDogMS4zLjYuMS40LjEuMjU2MjMuMS4wLjEwMzg2KQoKICAtIFdlYiBtaXJyb3JpbmcgLyB3ZWJtaXJyb3IubmFzbCAoT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTA2NjIpCgogIC0gRGlyZWN0b3J5IFNjYW5uZXIgLyBERElfRGlyZWN0b3J5X1NjYW5uZXIubmFzbCAoT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTEwMzIpCgogIC0gVGhlIGNvbmZpZ3VyZWQgJ2NnaV9wYXRoJyB3aXRoaW4gdGhlICdTY2FubmVyIFByZWZlcmVuY2VzJyBvZiB0aGUgc2NhbiBjb25maWcgaW4gdXNlCgogIC0gVGhlIGNvbmZpZ3VyZWQgJ0VuYWJsZSBDR0kgc2Nhbm5pbmcnLCAnRW5hYmxlIGdlbmVyaWMgd2ViIGFwcGxpY2F0aW9uIHNjYW5uaW5nJyBhbmQKICAgICdBZGQgaGlzdG9yaWMgL3NjcmlwdHMgYW5kIC9jZ2ktYmluIHRvIGRpcmVjdG9yaWVzIGZvciBDR0kgc2Nhbm5pbmcnIHdpdGhpbiB0aGUKICAgICdHbG9iYWwgdmFyaWFibGUgc2V0dGluZ3MnIG9mIHRoZSBzY2FuIGNvbmZpZyBpbiB1c2UKCiAgSWYgeW91IHRoaW5rIGFueSBvZiB0aGlzIGluZm9ybWF0aW9uIGlzIHdyb25nIHBsZWFzZSByZXBvcnQgaXQgdG8gdGhlIHJlZmVyZW5jZWQgY29tbXVuaXR5CiAgZm9ydW0uIiwiVGhlIEhvc3RuYW1lL0lQICIiMTkyLjE2OC4xLjI5IiIgd2FzIHVzZWQgdG8gYWNjZXNzIHRoZSByZW1vdGUgaG9zdC4KCkdlbmVyaWMgd2ViIGFwcGxpY2F0aW9uIHNjYW5uaW5nIGlzIGRpc2FibGVkIGZvciB0aGlzIGhvc3QgdmlhIHRoZSAiIkVuYWJsZSBnZW5lcmljIHdlYiBhcHBsaWNhdGlvbiBzY2FubmluZyIiIG9wdGlvbiB3aXRoaW4gdGhlICIiR2xvYmFsIHZhcmlhYmxlIHNldHRpbmdzIiIgb2YgdGhlIHNjYW4gY29uZmlnIGluIHVzZS4KClJlcXVlc3RzIHRvIHRoaXMgc2VydmljZSBhcmUgZG9uZSB2aWEgSFRUUC8xLjEuCgpUaGlzIHNlcnZpY2Ugc2VlbXMgdG8gYmUgYWJsZSB0byBob3N0IFBIUCBzY3JpcHRzLgoKVGhpcyBzZXJ2aWNlIHNlZW1zIHRvIGJlIE5PVCBhYmxlIHRvIGhvc3QgQVNQIHNjcmlwdHMuCgpUaGUgVXNlci1BZ2VudCAiIk1vemlsbGEvNS4wIFtlbl0gKFgxMSwgVTsgT3BlblZBUy1WVCAyMi43LjkpIiIgd2FzIHVzZWQgdG8gYWNjZXNzIHRoZSByZW1vdGUgaG9zdC4KCkhpc3RvcmljIC9zY3JpcHRzIGFuZCAvY2dpLWJpbiBhcmUgbm90IGFkZGVkIHRvIHRoZSBkaXJlY3RvcmllcyB1c2VkIGZvciBDR0kgc2Nhbm5pbmcuIFlvdSBjYW4gZW5hYmxlIHRoaXMgYWdhaW4gd2l0aCB0aGUgIiJBZGQgaGlzdG9yaWMgL3NjcmlwdHMgYW5kIC9jZ2ktYmluIHRvIGRpcmVjdG9yaWVzIGZvciBDR0kgc2Nhbm5pbmciIiBvcHRpb24gd2l0aGluIHRoZSAiIkdsb2JhbCB2YXJpYWJsZSBzZXR0aW5ncyIiIG9mIHRoZSBzY2FuIGNvbmZpZyBpbiB1c2UuCgpBIHBvc3NpYmxlIHJlY3Vyc2lvbiB3YXMgZGV0ZWN0ZWQgZHVyaW5nIENHSSBzY2FubmluZzoKClRoZSBzZXJ2aWNlIGlzIHVzaW5nIGEgcmVsYXRpdmUgVVJMIGluIG9uZSBvciBtb3JlIEhUTUwgcmVmZXJlbmNlcyB3aGVyZSBlLmcuIC9maWxlMS5odG1sIGNvbnRhaW5zIDxhIGhyZWY9IiJzdWJkaXIvZmlsZTIuaHRtbCIiPiBhbmQgYSBzdWJzZXF1ZW50IHJlcXVlc3QgZm9yIHN1YmRpci9maWxlMi5odG1sIGlzIGxpbmtpbmcgdG8gc3ViZGlyL2ZpbGUyLmh0bWwuIFRoaXMgd291bGQgcmVzb2x2ZXMgdG8gc3ViZGlyL3N1YmRpci9maWxlMi5odG1sIGNhdXNpbmcgYSByZWN1cnNpb24uIFRvIHdvcmsgYXJvdW5kIHRoaXMgY291bnRlci1tZWFzdXJlcyBoYXZlIGJlZW4gZW5hYmxlZCBidXQgdGhlIHNlcnZpY2Ugc2hvdWxkIGJlIGZpeGVkIGFzIHdlbGwgdG8gbm90IHVzZSBzdWNoIHByb2JsZW1hdGljIGxpbmtzLiBCZWxvdyBhbiBleGNlcnB0IG9mIFVSTHMgaXMgc2hvd24gdG8gaGVscCBpZGVudGlmeSB0aG9zZSBpc3N1ZXMuCgpTeW50YXggOiBVUkwgKEhUTUwgbGluaykKCmh0dHA6Ly8xOTIuMTY4LjEuMjkvbXV0aWxsaWRhZS9pbmRleC5waHAgKGluZGV4LnBocD9wYWdlPWRvY3VtZW50YXRpb24vaG93LXRvLWFjY2Vzcy1NdXRpbGxpZGFlLW92ZXItVmlydHVhbC1Cb3gtbmV0d29yay5waHApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvbXV0aWxsaWRhZS9pbmRleC5waHAgKGluZGV4LnBocD9wYWdlPWRvY3VtZW50YXRpb24vdnVsbmVyYWJpbGl0aWVzLnBocCkKClRoZSBmb2xsb3dpbmcgZGlyZWN0b3JpZXMgd2VyZSB1c2VkIGZvciBDR0kgc2Nhbm5pbmc6CgpodHRwOi8vMTkyLjE2OC4xLjI5LwpodHRwOi8vMTkyLjE2OC4xLjI5LyMKaHR0cDovLzE5Mi4xNjguMS4yOS9jZ2ktYmluCmh0dHA6Ly8xOTIuMTY4LjEuMjkvZGF2Cmh0dHA6Ly8xOTIuMTY4LjEuMjkvZG9jCmh0dHA6Ly8xOTIuMTY4LjEuMjkvZHZ3YQpodHRwOi8vMTkyLjE2OC4xLjI5L211dGlsbGlkYWUKaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlL2RvY3VtZW50YXRpb24KaHR0cDovLzE5Mi4xNjguMS4yOS9vb3BzL1RXaWtpCmh0dHA6Ly8xOTIuMTY4LjEuMjkvcGhwTXlBZG1pbgpodHRwOi8vMTkyLjE2OC4xLjI5L3JkaWZmL1RXaWtpCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdGVzdApodHRwOi8vMTkyLjE2OC4xLjI5L3Rlc3QvdGVzdG91dHB1dApodHRwOi8vMTkyLjE2OC4xLjI5L3Rpa2l3aWtpCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdGlraXdpa2kvbGliCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9wdWIKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9wdWIvVFdpa2kvRmlsZUF0dGFjaG1lbnQKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9wdWIvVFdpa2kvVFdpa2lEb2NHcmFwaGljcwpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL3B1Yi9UV2lraS9UV2lraUxvZ29zCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvcHViL1RXaWtpL1RXaWtpUHJlZmVyZW5jZXMKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9wdWIvVFdpa2kvVFdpa2lUZW1wbGF0ZXMKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9wdWIvaWNuCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdmlldy9UV2lraQoKV2hpbGUgdGhpcyBpcyBub3QsIGluIGFuZCBvZiBpdHNlbGYsIGEgYnVnLCB5b3Ugc2hvdWxkIG1hbnVhbGx5IGluc3BlY3QgdGhlc2UgZGlyZWN0b3JpZXMgdG8gZW5zdXJlIHRoYXQgdGhleSBhcmUgaW4gY29tcGxpYW5jZSB3aXRoIGNvbXBhbnkgc2VjdXJpdHkgc3RhbmRhcmRzCgpUaGUgZm9sbG93aW5nIGRpcmVjdG9yaWVzIHdlcmUgZXhjbHVkZWQgZnJvbSBDR0kgc2Nhbm5pbmcgYmVjYXVzZSB0aGUgIiJSZWdleCBwYXR0ZXJuIHRvIGV4Y2x1ZGUgZGlyZWN0b3JpZXMgZnJvbSBDR0kgc2Nhbm5pbmciIiBzZXR0aW5nIG9mIHRoZSBWVCAiIkdsb2JhbCB2YXJpYWJsZSBzZXR0aW5ncyIiIChPSUQ6IDEuMy42LjEuNC4xLjI1NjIzLjEuMC4xMjI4OCkgZm9yIHRoaXMgc2NhbiB3YXM6ICIiLyhpbmRleFwucGhwfGltYWdlfGltZ3xjc3N8anMkfGpzL3xqYXZhc2NyaXB0fHN0eWxlfHRoZW1lfGljb258anF1ZXJ5fGdyYXBoaWN8Z3JhZmlrfHBpY3R1cmV8YmlsZGVyfHRodW1ibmFpbHxtZWRpYS98c2tpbnM/LykiIgoKaHR0cDovLzE5Mi4xNjguMS4yOS9kdndhL2R2d2EvY3NzCmh0dHA6Ly8xOTIuMTY4LjEuMjkvZHZ3YS9kdndhL2ltYWdlcwpodHRwOi8vMTkyLjE2OC4xLjI5L2ljb25zCmh0dHA6Ly8xOTIuMTY4LjEuMjkvaW5kZXgucGhwL3dwLWpzb24KaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlL2ltYWdlcwpodHRwOi8vMTkyLjE2OC4xLjI5L211dGlsbGlkYWUvamF2YXNjcmlwdApodHRwOi8vMTkyLjE2OC4xLjI5L211dGlsbGlkYWUvamF2YXNjcmlwdC9kZHNtb290aG1lbnUKaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlL3N0eWxlcwpodHRwOi8vMTkyLjE2OC4xLjI5L211dGlsbGlkYWUvc3R5bGVzL2Rkc21vb3RobWVudQpodHRwOi8vMTkyLjE2OC4xLjI5L3BocE15QWRtaW4vdGhlbWVzL29yaWdpbmFsL2ltZwpodHRwOi8vMTkyLjE2OC4xLjI5L3Rpa2l3aWtpL2ltZy9pY29ucwpodHRwOi8vMTkyLjE2OC4xLjI5L3Rpa2l3aWtpL3N0eWxlcwpodHRwOi8vMTkyLjE2OC4xLjI5L3Rpa2l3aWtpL3N0eWxlcy90cmFuc2l0aW9ucwoKRGlyZWN0b3J5IGluZGV4IGZvdW5kIGF0OgoKaHR0cDovLzE5Mi4xNjguMS4yOS9kYXYvCmh0dHA6Ly8xOTIuMTY4LjEuMjkvbXV0aWxsaWRhZS9kb2N1bWVudGF0aW9uLwpodHRwOi8vMTkyLjE2OC4xLjI5L3Rlc3QvCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdGVzdC90ZXN0b3V0cHV0LwpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL1RXaWtpRG9jdW1lbnRhdGlvbi5odG1sCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL3ZpZXcvVFdpa2kvVFdpa2lEb2N1bWVudGF0aW9uCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL3ZpZXcvVFdpa2kvVFdpa2lJbnN0YWxsYXRpb25HdWlkZQoKRXh0cmFuZW91cyBwaHBpbmZvKCkgb3V0cHV0IGZvdW5kIGF0OgoKaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlL3BocGluZm8ucGhwCkNvbmNsdWRlZCBmcm9tOgogIDx0aXRsZT5waHBpbmZvKCk8L3RpdGxlPjxtZXRhIG5hbWU9IiJST0JPVFMiIiBjb250ZW50PSIiTk9JTkRFWCxOT0ZPTExPVyxOT0FSQ0hJVkUiIiAvPjwvaGVhZD4KICA8dHI+PHRkIGNsYXNzPSIiZSIiPkNvbmZpZ3VyYXRpb24gRmlsZSAocGhwLmluaSkgUGF0aCA8L3RkPjx0ZCBjbGFzcz0iInYiIj4vZXRjL3BocDUvY2dpIDwvdGQ+PC90cj4KICA8aDI+UEhQIFZhcmlhYmxlczwvaDI+Cmh0dHA6Ly8xOTIuMTY4LjEuMjkvcGhwaW5mby5waHAKQ29uY2x1ZGVkIGZyb206CiAgPHRpdGxlPnBocGluZm8oKTwvdGl0bGU+PG1ldGEgbmFtZT0iIlJPQk9UUyIiIGNvbnRlbnQ9IiJOT0lOREVYLE5PRk9MTE9XLE5PQVJDSElWRSIiIC8+PC9oZWFkPgogIDx0cj48dGQgY2xhc3M9IiJlIiI+Q29uZmlndXJhdGlvbiBGaWxlIChwaHAuaW5pKSBQYXRoIDwvdGQ+PHRkIGNsYXNzPSIidiIiPi9ldGMvcGhwNS9jZ2kgPC90ZD48L3RyPgogIDxoMj5QSFAgVmFyaWFibGVzPC9oMj4KClBIUCBzY3JpcHQgZGlzY2xvc2VzIHBoeXNpY2FsIHBhdGggYXQ6CgpodHRwOi8vMTkyLjE2OC4xLjI5L211dGlsbGlkYWUvZG9jdW1lbnRhdGlvbi92dWxuZXJhYmlsaXRpZXMucGhwICgvdmFyL3d3dy9tdXRpbGxpZGFlL2RvY3VtZW50YXRpb24vdnVsbmVyYWJpbGl0aWVzLnBocCkKaHR0cDovLzE5Mi4xNjguMS4yOS90aWtpd2lraS90aWtpLWluc3RhbGwucGhwICgvdmFyL3d3dy90aWtpd2lraS9saWIvYWRvZGIvZHJpdmVycy9hZG9kYi1teXNxbC5pbmMucGhwKQoKVGhlICIiTnVtYmVyIG9mIHBhZ2VzIHRvIG1pcnJvciIiIHNldHRpbmcgKEN1cnJlbnQ6IDIwMCkgb2YgdGhlIFZUICIiV2ViIG1pcnJvcmluZyIiIChPSUQ6IDEuMy42LjEuNC4xLjI1NjIzLjEuMC4xMDY2Mikgd2FzIHJlYWNoZWQuIFJhaXNpbmcgdGhpcyBsaW1pdCBhbGxvd3MgdG8gbWlycm9yIHRoaXMgaG9zdCBtb3JlIHRob3JvdWdobHkgYnV0IG1pZ2h0IGluY3JlYXNlIHRoZSBzY2FubmluZyB0aW1lLgoKTk9URTogVGhlICdNYXhpbXVtIG51bWJlciBvZiBpdGVtcyBzaG93biBmb3IgZWFjaCBsaXN0JyBzZXR0aW5nIGhhcyBiZWVuIHJlYWNoZWQuIFRoZXJlIGFyZSAzNjcgYWRkaXRpb25hbCBlbnRyaWVzIGF2YWlsYWJsZSBmb3IgdGhlIGZvbGxvd2luZyB0cnVuY2F0ZWQgbGlzdC4KClRoZSBmb2xsb3dpbmcgQ0dJcyB3ZXJlIGRpc2NvdmVyZWQ6CgpTeW50YXggOiBjZ2luYW1lIChhcmd1bWVudHMgW2RlZmF1bHQgdmFsdWVdKQoKaHR0cDovLzE5Mi4xNjguMS4yOS9kYXYvIChDPVM7TyBbQV0gQz1OO08gW0RdIEM9TTtPIFtBXSBDPUQ7TyBbQV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L2R2d2EvbG9naW4ucGhwICh1c2VybmFtZSBbXSBwYXNzd29yZCBbXSBMb2dpbiBbTG9naW5dICkKaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlLyAocGFnZSBbYWRkLXRvLXlvdXItYmxvZy5waHBdICkKaHR0cDovLzE5Mi4xNjguMS4yOS9tdXRpbGxpZGFlL2RvY3VtZW50YXRpb24vIChDPVM7TyBbQV0gQz1OO08gW0RdIEM9TTtPIFtBXSBDPUQ7TyBbQV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L211dGlsbGlkYWUvaW5kZXgucGhwICh1c2VybmFtZSBbYW5vbnltb3VzXSBkbyBbdG9nZ2xlLWhpbnRzXSBwYWdlIFtob21lLnBocF0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L29vcHMvVFdpa2kvVFdpa2lIaXN0b3J5ICh0ZW1wbGF0ZSBbb29wc3Jldl0gcGFyYW0xIFsxLjEwXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvcGhwTXlBZG1pbi9pbmRleC5waHAgKHBocE15QWRtaW4gWzYzODVjZTY3MGI0MDNhZDdjZjQ2Yjg5OGUxY2RiYzg5OTA5ODliYWVdIHRva2VuIFsqKipyZXBsYWNlZCoqKl0gcG1hX3VzZXJuYW1lIFtdIHRhYmxlIFtdIGxhbmcgW10gc2VydmVyIFsxXSBkYiBbXSBjb252Y2hhcnNldCBbdXRmLThdIHBtYV9wYXNzd29yZCBbXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvcGhwTXlBZG1pbi9waHBteWFkbWluLmNzcy5waHAgKHRva2VuIFsqKipyZXBsYWNlZCoqKl0ganNfZnJhbWUgW3JpZ2h0XSBsYW5nIFtlbi11dGYtOF0gbm9jYWNoZSBbMjQ1NzY4NzE1MV0gY29udmNoYXJzZXQgW3V0Zi04XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvcmRpZmYvVFdpa2kvVFdpa2lIaXN0b3J5IChyZXYxIFsxLjEwXSByZXYyIFsxLjldICkKaHR0cDovLzE5Mi4xNjguMS4yOS90ZXN0LyAoQz1TO08gW0FdIEM9TjtPIFtEXSBDPU07TyBbQV0gQz1EO08gW0FdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90ZXN0L3Rlc3RvdXRwdXQvIChDPVM7TyBbQV0gQz1OO08gW0RdIEM9TTtPIFtBXSBDPUQ7TyBbQV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3Rpa2l3aWtpL3Rpa2ktaW5zdGFsbC5waHAgKGhvc3QgW2xvY2FsaG9zdF0gZGJpbmZvIFtdIHBhc3MgW10gbmFtZSBbXSBkYiBbXSByZXN0YXJ0IFsxXSByZXNldGRiIFtdIHVzZXIgW10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9hdHRhY2gvVFdpa2kvRmlsZUF0dGFjaG1lbnQgKGZpbGVuYW1lIFtTYW1wbGUudHh0XSByZXZJbmZvIFsxXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvS25vdy9SZWFkbWVGaXJzdCAodCBbMTcxNDk1OTc4Nl0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L0tub3cvV2ViQ2hhbmdlcyAodCBbMTcxNDk1OTYwOV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L0tub3cvV2ViSG9tZSAodCBbMTcxNDk1OTU3M10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L0tub3cvV2ViSW5kZXggKHQgWzE3MTQ5NTk3ODddICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9Lbm93L1dlYk5vdGlmeSAodCBbMTcxNDk1OTc5MF0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L0tub3cvV2ViUHJlZmVyZW5jZXMgKHQgWzE3MTQ5NTk2MTZdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9Lbm93L1dlYlNlYXJjaCAodCBbMTcxNDk1OTYxNF0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L0tub3cvV2ViU3RhdGlzdGljcyAodCBbMTcxNDk1OTc5MV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L0tub3cvV2ViVG9waWNMaXN0ICh0IFsxNzE0OTU5Nzg5XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9CaWxsQ2xpbnRvbiAodG9waWNwYXJlbnQgW01haW4uVFdpa2lVc2Vyc10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vQ2hhcmxleXRoZUhvcnNlICh0IFsxNzE0OTU5ODA4XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9DaHJpc3RvcGhlVmVybWV1bGVuICh0b3BpY3BhcmVudCBbTWFpbi5UV2lraVVzZXJzXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9EYXZpZFdhcm1hbiAodG9waWNwYXJlbnQgW01haW4uVFdpa2lVc2Vyc10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vRW5naW5lZXJpbmdHcm91cCAodG9waWNwYXJlbnQgW01haW4uVFdpa2lHcm91cHNdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL0dvb2RTdHlsZSAodG9waWNwYXJlbnQgW01haW4uV2ViSG9tZV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vSm9obkFsdHN0YWR0ICh0b3BpY3BhcmVudCBbTWFpbi5UV2lraVVzZXJzXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9Kb2huVGFsaW50eXJlICh0IFsxNzE0OTU5ODA4XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9Mb25kb25PZmZpY2UgKHQgWzE3MTQ5NTk4MjBdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL01hcnRpblJhYWJlICh0b3BpY3BhcmVudCBbVFdpa2kuVFdpa2lVcGdyYWRlR3VpZGVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL05pY2hvbGFzTGVlICh0IFsxNzE0OTU5ODA5XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9PZmZpY2VMb2NhdGlvbnMgKHQgWzE3MTQ5NTk1ODFdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1BldGVyRm9ra2luZ2EgKHRvcGljcGFyZW50IFtNYWluLlRXaWtpVXNlcnNdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1BldGVyVGhvZW55ICh0IFsxNzE0OTU5Njc3XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9TYW5Kb3NlT2ZmaWNlICh0IFsxNzE0OTU5ODE5XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9TdXBwb3J0R3JvdXAgKHRvcGljcGFyZW50IFtNYWluLlRXaWtpR3JvdXBzXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9UV2lraUFkbWluR3JvdXAgKHQgWzE3MTQ5NTk4MTVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1RXaWtpR3JvdXBzICh0IFsxNzE0OTU5NTc5XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9UV2lraUd1ZXN0ICh0IFsxNzE0OTU5ODEwXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9UV2lraVByZWZlcmVuY2VzICh0b3BpY3BhcmVudCBbTWFpbi5XZWJIb21lXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9UV2lraVJlZ2lzdHJhdGlvbiAodG9waWNwYXJlbnQgW01haW4uVFdpa2lVc2Vyc10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vVFdpa2lVc2VycyAodCBbMTcxNDk1OTU3OF0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vVFdpa2lXZWIgKHRvcGljcGFyZW50IFtNYWluLldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1Rlc3RBcmVhICh0b3BpY3BhcmVudCBbTWFpbi5XZWJIb21lXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9UZXh0Rm9ybWF0dGluZ0ZBUSAodG9waWNwYXJlbnQgW01haW4uV2ViSG9tZV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vVGV4dEZvcm1hdHRpbmdSdWxlcyAodG9waWNwYXJlbnQgW01haW4uV2ViSG9tZV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vVG9reW9PZmZpY2UgKHQgWzE3MTQ5NTk4MjFdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dlYkNoYW5nZXMgKHQgWzE3MTQ5NTk1ODJdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dlYkhvbWUgKHQgWzE3MTQ5NTk1NjFdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dlYkluZGV4ICh0IFsxNzE0OTU5NTg2XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9XZWJOb3RpZnkgKHQgWzE3MTQ5NTk2MjJdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dlYlByZWZlcmVuY2VzICh0IFsxNzE0OTU5NTkxXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9XZWJTZWFyY2ggKHQgWzE3MTQ5NTk1ODhdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dlYlN0YXRpc3RpY3MgKHQgWzE3MTQ5NTk2MjNdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dlYlRvcGljRWRpdFRlbXBsYXRlICh0b3BpY3BhcmVudCBbTWFpbi5XZWJQcmVmZXJlbmNlc10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L01haW4vV2ViVG9waWNMaXN0ICh0IFsxNzE0OTU5NjIxXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9XZWxjb21lR3Vlc3QgKHRvcGljcGFyZW50IFtNYWluLldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9NYWluL1dpa2lOYW1lICh0b3BpY3BhcmVudCBbTWFpbi5UV2lraVVzZXJzXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvTWFpbi9XaWtpTm90YXRpb24gKHRvcGljcGFyZW50IFtNYWluLlRXaWtpVXNlcnNdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzEgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzIgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzMgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzQgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzUgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzYgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzcgKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1Rlc3RUb3BpYzggKHRvcGljcGFyZW50IFtTYW5kYm94LldlYkhvbWVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1dlYkNoYW5nZXMgKHQgWzE3MTQ5NTk2MTddICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1dlYkhvbWUgKHQgWzE3MTQ5NTk1NzVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1dlYkluZGV4ICh0IFsxNzE0OTU5Nzk2XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvU2FuZGJveC9XZWJOb3RpZnkgKHQgWzE3MTQ5NTk4MDJdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1dlYlByZWZlcmVuY2VzICh0IFsxNzE0OTU5NjIwXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvU2FuZGJveC9XZWJTZWFyY2ggKHQgWzE3MTQ5NTk2MTldICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1dlYlN0YXRpc3RpY3MgKHQgWzE3MTQ5NTk4MDNdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9TYW5kYm94L1dlYlRvcGljRWRpdFRlbXBsYXRlICh0b3BpY3BhcmVudCBbU2FuZGJveC5XZWJQcmVmZXJlbmNlc10gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L1NhbmRib3gvV2ViVG9waWNMaXN0ICh0IFsxNzE0OTU5ODAxXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvICh0b3BpYyBbXSB0b3BpY3BhcmVudCBbVFdpa2lGQVFdIG9ubHl3aWtpbmFtZSBbb25dIHRlbXBsYXRldG9waWMgW1RXaWtpRmFxVGVtcGxhdGVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9BcHBlbmRpeEZpbGVTeXN0ZW0gKHQgWzE3MTQ5NTk3NTldICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9CdW1weVdvcmQgKHQgWzE3MTQ5NTk4MjJdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9EZWZhdWx0UGx1Z2luICh0IFsxNzE0OTU5NzA4XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvRmlsZUF0dGFjaG1lbnQgKHQgWzE3MTQ5NTk3MDJdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9Gb3JtYXR0ZWRTZWFyY2ggKHQgWzE3MTQ5NTk3MzhdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9HbnVHZW5lcmFsUHVibGljTGljZW5zZSAodCBbMTcxNDk1OTc2Nl0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L1RXaWtpL0dvb2RTdHlsZSAodCBbMTcxNDk1OTY2Ml0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L1RXaWtpL0luc3RhbGxlZFBsdWdpbnMgKHQgWzE3MTQ5NTk3NjRdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9JbnN0YW50RW5oYW5jZW1lbnRzICh0IFsxNzE0OTU5NzE2XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvSW50ZXJXaWtpcyAodCBbMTcxNDk1OTcxMV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L1RXaWtpL0ludGVyd2lraVBsdWdpbiAodCBbMTcxNDk1OTcwOV0gKQpodHRwOi8vMTkyLjE2OC4xLjI5L3R3aWtpL2Jpbi9lZGl0L1RXaWtpL01hbmFnaW5nVG9waWNzICh0IFsxNzE0OTU5NzU1XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvTWFuYWdpbmdXZWJzICh0IFsxNzE0OTU5NzU3XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvTWVhbmluZ2Z1bFRpdGxlICh0b3BpY3BhcmVudCBbVFdpa2kuVGV4dEZvcm1hdHRpbmdGQVFdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9OZXdUb3BpYyAodG9waWNwYXJlbnQgW1RXaWtpLlRXaWtpU2hvcnRoYW5kXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvTm90RXhpc3RpbmdZZXQgKHRvcGljcGFyZW50IFtUV2lraS5UZXh0Rm9ybWF0dGluZ1J1bGVzXSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvUGV0ZXJUaG9lbnkgKHQgWzE3MTQ5NTk3NjVdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9TaXRlTWFwICh0IFsxNzE0OTU5NzY1XSApCmh0dHA6Ly8xOTIuMTY4LjEuMjkvdHdpa2kvYmluL2VkaXQvVFdpa2kvU3RhcnRpbmdQb2ludHMgKHQgWzE3MTQ5NTk1OTRdICkKaHR0cDovLzE5Mi4xNjguMS4yOS90d2lraS9iaW4vZWRpdC9UV2lraS9UV2lraUFjY2Vzc0NvbnRyb2wgKHQgWzE3MTQ5NTk3MzFdICkKIiwxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTExMDM4LCIiLGE2YTM2OTEyLTZjZjMtNDEyMC04OWNkLTA4YWJlMDRjYzE4OSwiMDYvMDUvMjAyNCAwMToyNzoxOSIsMjAyNC0wNS0wNlQwMTo0MTo0NSswMjowMCw1ZmExZTc2ZS1mZTgxLTQyNTgtODhlNS0yMGJkN2E0ODcyNjcsIiIsIiIsIiIsIiIsIgpEZXRhaWxzOgpDR0kgU2Nhbm5pbmcgQ29uc29saWRhdGlvbgooT0lEOiAxLjMuNi4xLjQuMS4yNTYyMy4xLjAuMTExMDM4KQpWZXJzaW9uIHVzZWQ6IDIwMjQtMDItMDhUMDY6MDU6NTkrMDI6MDAKIiwiIiwiIiwiIiwiIgoxOTIuMTY4LjEuMjksTUVUQVNQTE9JVEFCTEUsMjUsdGNwLDUuMCxNZWRpdW0sOTksIldvcmthcm91bmQiLCJDaGVjayBpZiBNYWlsc2VydmVyIGFuc3dlciB0byBWUkZZIGFuZCBFWFBOIHJlcXVlc3RzIiwiVGhlIE1haWxzZXJ2ZXIgb24gdGhpcyBob3N0IGFuc3dlcnMgdG8gVlJGWSBhbmQvb3IgRVhQTiByZXF1ZXN0cy4iLCInVlJGWSByb290JyBwcm9kdWNlcyB0aGUgZm9sbG93aW5nIGFuc3dlcjogMjUyIDIuMC4wIHJvb3QKCgoiLDEuMy42LjEuNC4xLjI1NjIzLjEuMC4xMDAwNzIsIiIsYTZhMzY5MTItNmNmMy00MTIwLTg5Y2QtMDhhYmUwNGNjMTg5LCIwNi8wNS8yMDI0IDAxOjI3OjE5IiwyMDI0LTA1LTA2VDAxOjQxOjQ1KzAyOjAwLDIxMzI4MTYzLTk5ZTAtNDRjMC1hNDM2LTNkZDRlM2I5YzUzMywiIiwiRGlzYWJsZSBWUkZZIGFuZC9vciBFWFBOIG9uIHlvdXIgTWFpbHNlcnZlci4KCiAgRm9yIHBvc3RmaXggYWRkICdkaXNhYmxlX3ZyZnlfY29tbWFuZD15ZXMnIGluICdtYWluLmNmJy4KCiAgRm9yIFNlbmRtYWlsIGFkZCB0aGUgb3B0aW9uICdPIFByaXZhY3lPcHRpb25zPWdvYXdheScuCgogIEl0IGlzIHN1Z2dlc3RlZCB0aGF0LCBpZiB5b3UgcmVhbGx5IHdhbnQgdG8gcHVibGlzaCB0aGlzIHR5cGUgb2YgaW5mb3JtYXRpb24sIHlvdSB1c2UgYSBtZWNoYW5pc20KICB0aGF0IGxlZ2l0aW1hdGUgdXNlcnMgYWN0dWFsbHkga25vdyBhYm91dCwgc3VjaCBhcyBGaW5nZXIgb3IgSFRUUC4iLCIiLCJWUkZZIGFuZCBFWFBOIGFzayB0aGUgc2VydmVyIGZvciBpbmZvcm1hdGlvbiBhYm91dCBhbiBhZGRyZXNzLiBUaGV5IGFyZQogIGluaGVyZW50bHkgdW51c2FibGUgdGhyb3VnaCBmaXJld2FsbHMsIGdhdGV3YXlzLCBtYWlsIGV4Y2hhbmdlcnMgZm9yIHBhcnQtdGltZSBob3N0cywgZXRjLiIsIgpEZXRhaWxzOgpDaGVjayBpZiBNYWlsc2VydmVyIGFuc3dlciB0byBWUkZZIGFuZCBFWFBOIHJlcXVlc3RzCihPSUQ6IDEuMy42LjEuNC4xLjI1NjIzLjEuMC4xMDAwNzIpClZlcnNpb24gdXNlZDogMjAyMy0xMC0zMVQwNjowNjozNyswMjowMAoiLCIiLCIiLCIiLCIiCg==</report>
  <filters id="">
    <term>apply_overrides=0 min_qod=70 first=1 rows=10 sort=name</term>
    <keywords>
      <keyword>
        <column>apply_overrides</column>
        <relation>=</relation>
        <value>0</value>
      </keyword>
      <keyword>
        <column>min_qod</column>
        <relation>=</relation>
        <value>70</value>
      </keyword>
      <keyword>
        <column>first</column>
        <relation>=</relation>
        <value>1</value>
      </keyword>
      <keyword>
        <column>rows</column>
        <relation>=</relation>
        <value>10</value>
      </keyword>
      <keyword>
        <column>sort</column>
        <relation>=</relation>
        <value>name</value>
      </keyword>
    </keywords>
  </filters>
  <sort>
    <field>name<order>ascending</order></field>
  </sort>
  <reports start="1" max="1000"/>
  <report_count>2<filtered>1</filtered><page>1</page></report_count>
</get_reports_response>
"""


def remove_before_and_after(xml_string):
    # Remove everything before word1
    index1 = xml_string.find('</report_format>')
    if index1 != -1:
        xml_string = xml_string[index1 + len('</report_format>'):]

    # Remove everything after word2
    index2 = xml_string.find('</report>')
    if index2 != -1:
        xml_string = xml_string[:index2]

    return xml_string

result = remove_before_and_after(xml_string)

def decode_base64(base64_string):
    # Decode the base64 string
    decoded_bytes = base64.b64decode(base64_string)
    # Convert bytes to string
    decoded_text = decoded_bytes.decode('utf-8')  # Assuming utf-8 encoding
    return decoded_text

# Example usage
decoded_text = decode_base64(result)
print(decoded_text)